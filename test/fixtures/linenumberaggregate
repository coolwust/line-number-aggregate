1 
2 
3 
4 
5 HTTPbis Working Group                                          M. Belshe
6 Internet-Draft                                                     Twist
7 Intended status: Standards Track                                 R. Peon
8 Expires: August 15, 2015                                     Google, Inc
9                                                          M. Thomson, Ed.
10                                                                  Mozilla
11                                                        February 11, 2015
12 
13 
14                  Hypertext Transfer Protocol version 2
15                       draft-ietf-httpbis-http2-17
16 
17 Abstract
18 
19    This specification describes an optimized expression of the semantics
20    of the Hypertext Transfer Protocol (HTTP).  HTTP/2 enables a more
21    efficient use of network resources and a reduced perception of
22    latency by introducing header field compression and allowing multiple
23    concurrent exchanges on the same connection.  It also introduces
24    unsolicited push of representations from servers to clients.
25 
26    This specification is an alternative to, but does not obsolete, the
27    HTTP/1.1 message syntax.  HTTP's existing semantics remain unchanged.
28 
29 Editorial Note (To be removed by RFC Editor)
30 
31    Discussion of this draft takes place on the HTTPBIS working group
32    mailing list (ietf-http-wg@w3.org), which is archived at [1].
33 
34    Working Group information can be found at [2]; that specific to
35    HTTP/2 are at [3].
36 
37    The changes in this draft are summarized in Appendix B.
38 
39 Status of This Memo
40 
41    This Internet-Draft is submitted in full conformance with the
42    provisions of BCP 78 and BCP 79.
43 
44    Internet-Drafts are working documents of the Internet Engineering
45    Task Force (IETF).  Note that other groups may also distribute
46    working documents as Internet-Drafts.  The list of current Internet-
47    Drafts is at http://datatracker.ietf.org/drafts/current/.
48 
49    Internet-Drafts are draft documents valid for a maximum of six months
50    and may be updated, replaced, or obsoleted by other documents at any
51    time.  It is inappropriate to use Internet-Drafts as reference
52    material or to cite them other than as "work in progress."
53 
54 
55 
56 Belshe, et al.           Expires August 15, 2015                [Page 1]
57 
58 Internet-Draft                   HTTP/2                    February 2015
59 
60 
61    This Internet-Draft will expire on August 15, 2015.
62 
63 Copyright Notice
64 
65    Copyright (c) 2015 IETF Trust and the persons identified as the
66    document authors.  All rights reserved.
67 
68    This document is subject to BCP 78 and the IETF Trust's Legal
69    Provisions Relating to IETF Documents
70    (http://trustee.ietf.org/license-info) in effect on the date of
71    publication of this document.  Please review these documents
72    carefully, as they describe your rights and restrictions with respect
73    to this document.  Code Components extracted from this document must
74    include Simplified BSD License text as described in Section 4.e of
75    the Trust Legal Provisions and are provided without warranty as
76    described in the Simplified BSD License.
77 
78 Table of Contents
79 
80    1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   4
81    2.  HTTP/2 Protocol Overview  . . . . . . . . . . . . . . . . . .   5
82      2.1.  Document Organization . . . . . . . . . . . . . . . . . .   6
83      2.2.  Conventions and Terminology . . . . . . . . . . . . . . .   6
84    3.  Starting HTTP/2 . . . . . . . . . . . . . . . . . . . . . . .   7
85      3.1.  HTTP/2 Version Identification . . . . . . . . . . . . . .   8
86      3.2.  Starting HTTP/2 for "http" URIs . . . . . . . . . . . . .   9
87        3.2.1.  HTTP2-Settings Header Field . . . . . . . . . . . . .  10
88      3.3.  Starting HTTP/2 for "https" URIs  . . . . . . . . . . . .  11
89      3.4.  Starting HTTP/2 with Prior Knowledge  . . . . . . . . . .  11
90      3.5.  HTTP/2 Connection Preface . . . . . . . . . . . . . . . .  11
91    4.  HTTP Frames . . . . . . . . . . . . . . . . . . . . . . . . .  12
92      4.1.  Frame Format  . . . . . . . . . . . . . . . . . . . . . .  13
93      4.2.  Frame Size  . . . . . . . . . . . . . . . . . . . . . . .  14
94      4.3.  Header Compression and Decompression  . . . . . . . . . .  14
95    5.  Streams and Multiplexing  . . . . . . . . . . . . . . . . . .  15
96      5.1.  Stream States . . . . . . . . . . . . . . . . . . . . . .  16
97        5.1.1.  Stream Identifiers  . . . . . . . . . . . . . . . . .  21
98        5.1.2.  Stream Concurrency  . . . . . . . . . . . . . . . . .  22
99      5.2.  Flow Control  . . . . . . . . . . . . . . . . . . . . . .  23
100        5.2.1.  Flow Control Principles . . . . . . . . . . . . . . .  23
101        5.2.2.  Appropriate Use of Flow Control . . . . . . . . . . .  24
102      5.3.  Stream priority . . . . . . . . . . . . . . . . . . . . .  25
103        5.3.1.  Stream Dependencies . . . . . . . . . . . . . . . . .  25
104        5.3.2.  Dependency Weighting  . . . . . . . . . . . . . . . .  26
105        5.3.3.  Reprioritization  . . . . . . . . . . . . . . . . . .  27
106        5.3.4.  Prioritization State Management . . . . . . . . . . .  27
107        5.3.5.  Default Priorities  . . . . . . . . . . . . . . . . .  29
108      5.4.  Error Handling  . . . . . . . . . . . . . . . . . . . . .  29
109 
110 
111 
112 Belshe, et al.           Expires August 15, 2015                [Page 2]
113 
114 Internet-Draft                   HTTP/2                    February 2015
115 
116 
117        5.4.1.  Connection Error Handling . . . . . . . . . . . . . .  29
118        5.4.2.  Stream Error Handling . . . . . . . . . . . . . . . .  30
119        5.4.3.  Connection Termination  . . . . . . . . . . . . . . .  30
120      5.5.  Extending HTTP/2  . . . . . . . . . . . . . . . . . . . .  30
121    6.  Frame Definitions . . . . . . . . . . . . . . . . . . . . . .  31
122      6.1.  DATA  . . . . . . . . . . . . . . . . . . . . . . . . . .  31
123      6.2.  HEADERS . . . . . . . . . . . . . . . . . . . . . . . . .  33
124      6.3.  PRIORITY  . . . . . . . . . . . . . . . . . . . . . . . .  35
125      6.4.  RST_STREAM  . . . . . . . . . . . . . . . . . . . . . . .  36
126      6.5.  SETTINGS  . . . . . . . . . . . . . . . . . . . . . . . .  37
127        6.5.1.  SETTINGS Format . . . . . . . . . . . . . . . . . . .  38
128        6.5.2.  Defined SETTINGS Parameters . . . . . . . . . . . . .  38
129        6.5.3.  Settings Synchronization  . . . . . . . . . . . . . .  40
130      6.6.  PUSH_PROMISE  . . . . . . . . . . . . . . . . . . . . . .  40
131      6.7.  PING  . . . . . . . . . . . . . . . . . . . . . . . . . .  42
132      6.8.  GOAWAY  . . . . . . . . . . . . . . . . . . . . . . . . .  43
133      6.9.  WINDOW_UPDATE . . . . . . . . . . . . . . . . . . . . . .  46
134        6.9.1.  The Flow Control Window . . . . . . . . . . . . . . .  47
135        6.9.2.  Initial Flow Control Window Size  . . . . . . . . . .  48
136        6.9.3.  Reducing the Stream Window Size . . . . . . . . . . .  49
137      6.10. CONTINUATION  . . . . . . . . . . . . . . . . . . . . . .  49
138    7.  Error Codes . . . . . . . . . . . . . . . . . . . . . . . . .  50
139    8.  HTTP Message Exchanges  . . . . . . . . . . . . . . . . . . .  51
140      8.1.  HTTP Request/Response Exchange  . . . . . . . . . . . . .  51
141        8.1.1.  Upgrading From HTTP/2 . . . . . . . . . . . . . . . .  53
142        8.1.2.  HTTP Header Fields  . . . . . . . . . . . . . . . . .  53
143        8.1.3.  Examples  . . . . . . . . . . . . . . . . . . . . . .  57
144        8.1.4.  Request Reliability Mechanisms in HTTP/2  . . . . . .  59
145      8.2.  Server Push . . . . . . . . . . . . . . . . . . . . . . .  60
146        8.2.1.  Push Requests . . . . . . . . . . . . . . . . . . . .  61
147        8.2.2.  Push Responses  . . . . . . . . . . . . . . . . . . .  62
148      8.3.  The CONNECT Method  . . . . . . . . . . . . . . . . . . .  63
149    9.  Additional HTTP Requirements/Considerations . . . . . . . . .  64
150      9.1.  Connection Management . . . . . . . . . . . . . . . . . .  64
151        9.1.1.  Connection Reuse  . . . . . . . . . . . . . . . . . .  65
152        9.1.2.  The 421 (Misdirected Request) Status Code . . . . . .  66
153      9.2.  Use of TLS Features . . . . . . . . . . . . . . . . . . .  66
154        9.2.1.  TLS 1.2 Features  . . . . . . . . . . . . . . . . . .  67
155        9.2.2.  TLS 1.2 Cipher Suites . . . . . . . . . . . . . . . .  68
156    10. Security Considerations . . . . . . . . . . . . . . . . . . .  68
157      10.1.  Server Authority . . . . . . . . . . . . . . . . . . . .  68
158      10.2.  Cross-Protocol Attacks . . . . . . . . . . . . . . . . .  68
159      10.3.  Intermediary Encapsulation Attacks . . . . . . . . . . .  69
160      10.4.  Cacheability of Pushed Responses . . . . . . . . . . . .  69
161      10.5.  Denial of Service Considerations . . . . . . . . . . . .  70
162        10.5.1.  Limits on Header Block Size  . . . . . . . . . . . .  71
163        10.5.2.  CONNECT Issues . . . . . . . . . . . . . . . . . . .  71
164      10.6.  Use of Compression . . . . . . . . . . . . . . . . . . .  72
165 
166 
167 
168 Belshe, et al.           Expires August 15, 2015                [Page 3]
169 
170 Internet-Draft                   HTTP/2                    February 2015
171 
172 
173      10.7.  Use of Padding . . . . . . . . . . . . . . . . . . . . .  72
174      10.8.  Privacy Considerations . . . . . . . . . . . . . . . . .  73
175    11. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  73
176      11.1.  Registration of HTTP/2 Identification Strings  . . . . .  74
177      11.2.  Frame Type Registry  . . . . . . . . . . . . . . . . . .  74
178      11.3.  Settings Registry  . . . . . . . . . . . . . . . . . . .  75
179      11.4.  Error Code Registry  . . . . . . . . . . . . . . . . . .  76
180      11.5.  HTTP2-Settings Header Field Registration . . . . . . . .  77
181      11.6.  PRI Method Registration  . . . . . . . . . . . . . . . .  78
182      11.7.  The 421 (Misdirected Request) HTTP Status Code . . . . .  78
183    12. Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  78
184    13. References  . . . . . . . . . . . . . . . . . . . . . . . . .  79
185      13.1.  Normative References . . . . . . . . . . . . . . . . . .  79
186      13.2.  Informative References . . . . . . . . . . . . . . . . .  80
187      13.3.  URIs . . . . . . . . . . . . . . . . . . . . . . . . . .  81
188    Appendix A.  TLS 1.2 Cipher Suite Black List  . . . . . . . . . .  82
189    Appendix B.  Change Log . . . . . . . . . . . . . . . . . . . . .  86
190      B.1.  Since draft-ietf-httpbis-http2-15 . . . . . . . . . . . .  86
191      B.2.  Since draft-ietf-httpbis-http2-14 . . . . . . . . . . . .  86
192      B.3.  Since draft-ietf-httpbis-http2-13 . . . . . . . . . . . .  87
193      B.4.  Since draft-ietf-httpbis-http2-12 . . . . . . . . . . . .  87
194      B.5.  Since draft-ietf-httpbis-http2-11 . . . . . . . . . . . .  87
195      B.6.  Since draft-ietf-httpbis-http2-10 . . . . . . . . . . . .  87
196      B.7.  Since draft-ietf-httpbis-http2-09 . . . . . . . . . . . .  88
197      B.8.  Since draft-ietf-httpbis-http2-08 . . . . . . . . . . . .  88
198      B.9.  Since draft-ietf-httpbis-http2-07 . . . . . . . . . . . .  89
199      B.10. Since draft-ietf-httpbis-http2-06 . . . . . . . . . . . .  89
200      B.11. Since draft-ietf-httpbis-http2-05 . . . . . . . . . . . .  89
201      B.12. Since draft-ietf-httpbis-http2-04 . . . . . . . . . . . .  89
202      B.13. Since draft-ietf-httpbis-http2-03 . . . . . . . . . . . .  90
203      B.14. Since draft-ietf-httpbis-http2-02 . . . . . . . . . . . .  90
204      B.15. Since draft-ietf-httpbis-http2-01 . . . . . . . . . . . .  90
205      B.16. Since draft-ietf-httpbis-http2-00 . . . . . . . . . . . .  91
206      B.17. Since draft-mbelshe-httpbis-spdy-00 . . . . . . . . . . .  91
207 
208 1.  Introduction
209 
210    The Hypertext Transfer Protocol (HTTP) is a wildly successful
211    protocol.  However, how HTTP/1.1 uses the underlying transport
212    ([RFC7230], Section 6) has several characteristics that have a
213    negative overall effect on application performance today.
214 
215    In particular, HTTP/1.0 allowed only one request to be outstanding at
216    a time on a given TCP connection.  HTTP/1.1 added request pipelining,
217    but this only partially addressed request concurrency and still
218    suffers from head-of-line blocking.  Therefore, HTTP/1.0 and HTTP/1.1
219    clients that need to make many requests use multiple connections to a
220    server in order to achieve concurrency and thereby reduce latency.
221 
222 
223 
224 Belshe, et al.           Expires August 15, 2015                [Page 4]
225 
226 Internet-Draft                   HTTP/2                    February 2015
227 
228 
229    Furthermore, HTTP header fields are often repetitive and verbose,
230    causing unnecessary network traffic, as well as causing the initial
231    TCP [TCP] congestion window to quickly fill.  This can result in
232    excessive latency when multiple requests are made on a new TCP
233    connection.
234 
235    HTTP/2 addresses these issues by defining an optimized mapping of
236    HTTP's semantics to an underlying connection.  Specifically, it
237    allows interleaving of request and response messages on the same
238    connection and uses an efficient coding for HTTP header fields.  It
239    also allows prioritization of requests, letting more important
240    requests complete more quickly, further improving performance.
241 
242    The resulting protocol is more friendly to the network, because fewer
243    TCP connections can be used in comparison to HTTP/1.x.  This means
244    less competition with other flows, and longer-lived connections,
245    which in turn leads to better utilization of available network
246    capacity.
247 
248    Finally, HTTP/2 also enables more efficient processing of messages
249    through use of binary message framing.
250 
251 2.  HTTP/2 Protocol Overview
252 
253    HTTP/2 provides an optimized transport for HTTP semantics.  HTTP/2
254    supports all of the core features of HTTP/1.1, but aims to be more
255    efficient in several ways.
256 
257    The basic protocol unit in HTTP/2 is a frame (Section 4.1).  Each
258    frame type serves a different purpose.  For example, HEADERS and DATA
259    frames form the basis of HTTP requests and responses (Section 8.1);
260    other frame types like SETTINGS, WINDOW_UPDATE, and PUSH_PROMISE are
261    used in support of other HTTP/2 features.
262 
263    Multiplexing of requests is achieved by having each HTTP request-
264    response exchange associated with its own stream (Section 5).
265    Streams are largely independent of each other, so a blocked or
266    stalled request or response does not prevent progress on other
267    streams.
268 
269    Flow control and prioritization ensure that it is possible to
270    efficiently use multiplexed streams.  Flow control (Section 5.2)
271    helps to ensure that only data that can be used by a receiver is
272    transmitted.  Prioritization (Section 5.3) ensures that limited
273    resources can be directed to the most important streams first.
274 
275    HTTP/2 adds a new interaction mode, whereby a server can push
276    responses to a client (Section 8.2).  Server push allows a server to
277 
278 
279 
280 Belshe, et al.           Expires August 15, 2015                [Page 5]
281 
282 Internet-Draft                   HTTP/2                    February 2015
283 
284 
285    speculatively send data to a client that the server anticipates the
286    client will need, trading off some network usage against a potential
287    latency gain.  The server does this by synthesizing a request, which
288    it sends as a PUSH_PROMISE frame.  The server is then able to send a
289    response to the synthetic request on a separate stream.
290 
291    Because HTTP header fields used in a connection can contain large
292    amounts of redundant data, frames that contain them are compressed
293    (Section 4.3).  This has especially advantageous impact upon request
294    sizes in the common case, allowing many requests to be compressed
295    into one packet.
296 
297 2.1.  Document Organization
298 
299    The HTTP/2 specification is split into four parts:
300 
301    o  Starting HTTP/2 (Section 3) covers how an HTTP/2 connection is
302       initiated.
303 
304    o  The framing (Section 4) and streams (Section 5) layers describe
305       the way HTTP/2 frames are structured and formed into multiplexed
306       streams.
307 
308    o  Frame (Section 6) and error (Section 7) definitions include
309       details of the frame and error types used in HTTP/2.
310 
311    o  HTTP mappings (Section 8) and additional requirements (Section 9)
312       describe how HTTP semantics are expressed using frames and
313       streams.
314 
315    While some of the frame and stream layer concepts are isolated from
316    HTTP, this specification does not define a completely generic framing
317    layer.  The framing and streams layers are tailored to the needs of
318    the HTTP protocol and server push.
319 
320 2.2.  Conventions and Terminology
321 
322    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
323    "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
324    document are to be interpreted as described in RFC 2119 [RFC2119].
325 
326    All numeric values are in network byte order.  Values are unsigned
327    unless otherwise indicated.  Literal values are provided in decimal
328    or hexadecimal as appropriate.  Hexadecimal literals are prefixed
329    with "0x" to distinguish them from decimal literals.
330 
331    The following terms are used:
332 
333 
334 
335 
336 Belshe, et al.           Expires August 15, 2015                [Page 6]
337 
338 Internet-Draft                   HTTP/2                    February 2015
339 
340 
341    client:  The endpoint that initiates an HTTP/2 connection.  Clients
342       send HTTP requests and receive HTTP responses.
343 
344    connection:  A transport-layer connection between two endpoints.
345 
346    connection error:  An error that affects the entire HTTP/2
347       connection.
348 
349    endpoint:  Either the client or server of the connection.
350 
351    frame:  The smallest unit of communication within an HTTP/2
352       connection, consisting of a header and a variable-length sequence
353       of octets structured according to the frame type.
354 
355    peer:  An endpoint.  When discussing a particular endpoint, "peer"
356       refers to the endpoint that is remote to the primary subject of
357       discussion.
358 
359    receiver:  An endpoint that is receiving frames.
360 
361    sender:  An endpoint that is transmitting frames.
362 
363    server:  The endpoint that accepts an HTTP/2 connection.  Servers
364       receive HTTP requests and serve HTTP responses.
365 
366    stream:  A bi-directional flow of frames within the HTTP/2
367       connection.
368 
369    stream error:  An error on the individual HTTP/2 stream.
370 
371    Finally, the terms "gateway", "intermediary", "proxy", and "tunnel"
372    are defined in Section 2.3 of [RFC7230].  Intermediaries act as both
373    client and server at different times.
374 
375    The term "payload body" is defined in Section 3.3 of [RFC7230].
376 
377 3.  Starting HTTP/2
378 
379    An HTTP/2 connection is an application layer protocol running on top
380    of a TCP connection ([TCP]).  The client is the TCP connection
381    initiator.
382 
383    HTTP/2 uses the same "http" and "https" URI schemes used by HTTP/1.1.
384    HTTP/2 shares the same default port numbers: 80 for "http" URIs and
385    443 for "https" URIs.  As a result, implementations processing
386    requests for target resource URIs like "http://example.org/foo" or
387    "https://example.com/bar" are required to first discover whether the
388 
389 
390 
391 
392 Belshe, et al.           Expires August 15, 2015                [Page 7]
393 
394 Internet-Draft                   HTTP/2                    February 2015
395 
396 
397    upstream server (the immediate peer to which the client wishes to
398    establish a connection) supports HTTP/2.
399 
400    The means by which support for HTTP/2 is determined is different for
401    "http" and "https" URIs.  Discovery for "http" URIs is described in
402    Section 3.2.  Discovery for "https" URIs is described in Section 3.3.
403 
404 3.1.  HTTP/2 Version Identification
405 
406    The protocol defined in this document has two identifiers.
407 
408    o  The string "h2" identifies the protocol where HTTP/2 uses TLS
409       [TLS12].  This identifier is used in the TLS application layer
410       protocol negotiation extension (ALPN) [TLS-ALPN] field and in any
411       place where HTTP/2 over TLS is identified.
412 
413       The "h2" string is serialized into an ALPN protocol identifier as
414       the two octet sequence: 0x68, 0x32.
415 
416    o  The string "h2c" identifies the protocol where HTTP/2 is run over
417       cleartext TCP.  This identifier is used in the HTTP/1.1 Upgrade
418       header field and in any place where HTTP/2 over TCP is identified.
419 
420       The "h2c" string is reserved from the ALPN identifier space, but
421       describes a protocol that does not use TLS.
422 
423    Negotiating "h2" or "h2c" implies the use of the transport, security,
424    framing and message semantics described in this document.
425 
426    [[CREF1: RFC Editor's Note: please remove the remainder of this
427    section prior to the publication of a final version of this
428    document.]]
429 
430    Only implementations of the final, published RFC can identify
431    themselves as "h2" or "h2c".  Until such an RFC exists,
432    implementations MUST NOT identify themselves using these strings.
433 
434    Implementations of draft versions of the protocol MUST add the string
435    "-" and the corresponding draft number to the identifier.  For
436    example, draft-ietf-httpbis-http2-11 over TLS is identified using the
437    string "h2-11".
438 
439    Non-compatible experiments that are based on these draft versions
440    MUST append the string "-" and an experiment name to the identifier.
441    For example, an experimental implementation of packet mood-based
442    encoding based on draft-ietf-httpbis-http2-09 might identify itself
443    as "h2-09-emo".  Note that any label MUST conform to the "token"
444    syntax defined in Section 3.2.6 of [RFC7230].  Experimenters are
445 
446 
447 
448 Belshe, et al.           Expires August 15, 2015                [Page 8]
449 
450 Internet-Draft                   HTTP/2                    February 2015
451 
452 
453    encouraged to coordinate their experiments on the ietf-http-wg@w3.org
454    mailing list.
455 
456 3.2.  Starting HTTP/2 for "http" URIs
457 
458    A client that makes a request for an "http" URI without prior
459    knowledge about support for HTTP/2 on the next hop uses the HTTP
460    Upgrade mechanism (Section 6.7 of [RFC7230]).  The client does so by
461    making an HTTP/1.1 request that includes an Upgrade header field with
462    the "h2c" token.  Such an HTTP/1.1 request MUST include exactly one
463    HTTP2-Settings (Section 3.2.1) header field.
464 
465    For example:
466 
467      GET / HTTP/1.1
468      Host: server.example.com
469      Connection: Upgrade, HTTP2-Settings
470      Upgrade: h2c
471      HTTP2-Settings: <base64url encoding of HTTP/2 SETTINGS payload>
472 
473 
474    Requests that contain an payload body MUST be sent in their entirety
475    before the client can send HTTP/2 frames.  This means that a large
476    request can block the use of the connection until it is completely
477    sent.
478 
479    If concurrency of an initial request with subsequent requests is
480    important, an OPTIONS request can be used to perform the upgrade to
481    HTTP/2, at the cost of an additional round-trip.
482 
483    A server that does not support HTTP/2 can respond to the request as
484    though the Upgrade header field were absent:
485 
486      HTTP/1.1 200 OK
487      Content-Length: 243
488      Content-Type: text/html
489 
490      ...
491 
492    A server MUST ignore an "h2" token in an Upgrade header field.
493    Presence of a token with "h2" implies HTTP/2 over TLS, which is
494    instead negotiated as described in Section 3.3.
495 
496    A server that supports HTTP/2 accepts the upgrade with a 101
497    (Switching Protocols) response.  After the empty line that terminates
498    the 101 response, the server can begin sending HTTP/2 frames.  These
499    frames MUST include a response to the request that initiated the
500    Upgrade.
501 
502 
503 
504 Belshe, et al.           Expires August 15, 2015                [Page 9]
505 
506 Internet-Draft                   HTTP/2                    February 2015
507 
508 
509    For example:
510 
511      HTTP/1.1 101 Switching Protocols
512      Connection: Upgrade
513      Upgrade: h2c
514 
515      [ HTTP/2 connection ...
516 
517    The first HTTP/2 frame sent by the server MUST be a SETTINGS frame
518    (Section 6.5) as the server connection preface (Section 3.5).  Upon
519    receiving the 101 response, the client MUST send a connection preface
520    (Section 3.5), which includes a SETTINGS frame.
521 
522    The HTTP/1.1 request that is sent prior to upgrade is assigned a
523    stream identifier of 1 (see Section 5.1.1) with default priority
524    values (Section 5.3.5).  Stream 1 is implicitly "half closed" from
525    the client toward the server (see Section 5.1), since the request is
526    completed as an HTTP/1.1 request.  After commencing the HTTP/2
527    connection, stream 1 is used for the response.
528 
529 3.2.1.  HTTP2-Settings Header Field
530 
531    A request that upgrades from HTTP/1.1 to HTTP/2 MUST include exactly
532    one "HTTP2-Settings" header field.  The "HTTP2-Settings" header field
533    is a connection-specific header field that includes parameters that
534    govern the HTTP/2 connection, provided in anticipation of the server
535    accepting the request to upgrade.
536 
537      HTTP2-Settings    = token68
538 
539    A server MUST NOT upgrade the connection to HTTP/2 if this header
540    field is not present, or if more than one is present.  A server MUST
541    NOT send this header field.
542 
543    The content of the "HTTP2-Settings" header field is the payload of a
544    SETTINGS frame (Section 6.5), encoded as a base64url string (that is,
545    the URL- and filename-safe Base64 encoding described in Section 5 of
546    [RFC4648], with any trailing '=' characters omitted).  The ABNF
547    [RFC5234] production for "token68" is defined in Section 2.1 of
548    [RFC7235].
549 
550    Since the upgrade is only intended to apply to the immediate
551    connection, a client sending "HTTP2-Settings" MUST also send
552    "HTTP2-Settings" as a connection option in the "Connection" header
553    field to prevent it from being forwarded (see Section 6.1 of
554    [RFC7230]).
555 
556 
557 
558 
559 
560 Belshe, et al.           Expires August 15, 2015               [Page 10]
561 
562 Internet-Draft                   HTTP/2                    February 2015
563 
564 
565    A server decodes and interprets these values as it would any other
566    SETTINGS frame.  Explicit acknowledgement of these settings
567    (Section 6.5.3) is not necessary, since a 101 response serves as
568    implicit acknowledgment.  Providing these values in the Upgrade
569    request gives a client an opportunity to provide parameters prior to
570    receiving any frames from the server.
571 
572 3.3.  Starting HTTP/2 for "https" URIs
573 
574    A client that makes a request to an "https" URI uses TLS [TLS12] with
575    the application layer protocol negotiation (ALPN) extension
576    [TLS-ALPN].
577 
578    HTTP/2 over TLS uses the "h2" protocol identifier.  The "h2c"
579    protocol identifier MUST NOT be sent by a client or selected by a
580    server; the "h2c" protocol identifier describes a protocol that does
581    not use TLS.
582 
583    Once TLS negotiation is complete, both the client and the server MUST
584    send a connection preface (Section 3.5).
585 
586 3.4.  Starting HTTP/2 with Prior Knowledge
587 
588    A client can learn that a particular server supports HTTP/2 by other
589    means.  For example, [ALT-SVC] describes a mechanism for advertising
590    this capability.
591 
592    A client MUST send the connection preface (Section 3.5), and then MAY
593    immediately send HTTP/2 frames to such a server; servers can identify
594    these connections by the presence of the connection preface.  This
595    only affects the establishment of HTTP/2 connections over cleartext
596    TCP; implementations that support HTTP/2 over TLS MUST use protocol
597    negotiation in TLS [TLS-ALPN].
598 
599    Likewise, the server MUST send a connection preface (Section 3.5).
600 
601    Without additional information, prior support for HTTP/2 is not a
602    strong signal that a given server will support HTTP/2 for future
603    connections.  For example, it is possible for server configurations
604    to change, for configurations to differ between instances in
605    clustered servers, or for network conditions to change.
606 
607 3.5.  HTTP/2 Connection Preface
608 
609    In HTTP/2, each endpoint is required to send a connection preface as
610    a final confirmation of the protocol in use, and to establish the
611    initial settings for the HTTP/2 connection.  The client and server
612    each send a different connection preface.
613 
614 
615 
616 Belshe, et al.           Expires August 15, 2015               [Page 11]
617 
618 Internet-Draft                   HTTP/2                    February 2015
619 
620 
621    The client connection preface starts with a sequence of 24 octets,
622    which in hex notation are:
623 
624      0x505249202a20485454502f322e300d0a0d0a534d0d0a0d0a
625 
626    (the string "PRI * HTTP/2.0\r\n\r\nSM\r\n\r\n").  This sequence MUST
627    be followed by a SETTINGS frame (Section 6.5), which MAY be empty.
628    The client sends the client connection preface immediately upon
629    receipt of a 101 Switching Protocols response (indicating a
630    successful upgrade), or as the first application data octets of a TLS
631    connection.  If starting an HTTP/2 connection with prior knowledge of
632    server support for the protocol, the client connection preface is
633    sent upon connection establishment.
634 
635       The client connection preface is selected so that a large
636       proportion of HTTP/1.1 or HTTP/1.0 servers and intermediaries do
637       not attempt to process further frames.  Note that this does not
638       address the concerns raised in [TALKING].
639 
640    The server connection preface consists of a potentially empty
641    SETTINGS frame (Section 6.5) that MUST be the first frame the server
642    sends in the HTTP/2 connection.
643 
644    The SETTINGS frames received from a peer as part of the connection
645    preface MUST be acknowledged (see Section 6.5.3) after sending the
646    connection preface.
647 
648    To avoid unnecessary latency, clients are permitted to send
649    additional frames to the server immediately after sending the client
650    connection preface, without waiting to receive the server connection
651    preface.  It is important to note, however, that the server
652    connection preface SETTINGS frame might include parameters that
653    necessarily alter how a client is expected to communicate with the
654    server.  Upon receiving the SETTINGS frame, the client is expected to
655    honor any parameters established.  In some configurations, it is
656    possible for the server to transmit SETTINGS before the client sends
657    additional frames, providing an opportunity to avoid this issue.
658 
659    Clients and servers MUST treat an invalid connection preface as a
660    connection error (Section 5.4.1) of type PROTOCOL_ERROR.  A GOAWAY
661    frame (Section 6.8) MAY be omitted in this case, since an invalid
662    preface indicates that the peer is not using HTTP/2.
663 
664 4.  HTTP Frames
665 
666    Once the HTTP/2 connection is established, endpoints can begin
667    exchanging frames.
668 
669 
670 
671 
672 Belshe, et al.           Expires August 15, 2015               [Page 12]
673 
674 Internet-Draft                   HTTP/2                    February 2015
675 
676 
677 4.1.  Frame Format
678 
679    All frames begin with a fixed 9-octet header followed by a variable-
680    length payload.
681 
682     +-----------------------------------------------+
683     |                 Length (24)                   |
684     +---------------+---------------+---------------+
685     |   Type (8)    |   Flags (8)   |
686     +-+-------------+---------------+-------------------------------+
687     |R|                 Stream Identifier (31)                      |
688     +=+=============================================================+
689     |                   Frame Payload (0...)                      ...
690     +---------------------------------------------------------------+
691 
692                           Figure 1: Frame Layout
693 
694    The fields of the frame header are defined as:
695 
696    Length:  The length of the frame payload expressed as an unsigned
697       24-bit integer.  Values greater than 2^14 (16,384) MUST NOT be
698       sent unless the receiver has set a larger value for
699       SETTINGS_MAX_FRAME_SIZE.
700 
701       The 9 octets of the frame header are not included in this value.
702 
703    Type:  The 8-bit type of the frame.  The frame type determines the
704       format and semantics of the frame.  Implementations MUST ignore
705       and discard any frame that has a type that is unknown.
706 
707    Flags:  An 8-bit field reserved for frame-type specific boolean
708       flags.
709 
710       Flags are assigned semantics specific to the indicated frame type.
711       Flags that have no defined semantics for a particular frame type
712       MUST be ignored, and MUST be left unset (0x0) when sending.
713 
714    R: A reserved 1-bit field.  The semantics of this bit are undefined
715       and the bit MUST remain unset (0x0) when sending and MUST be
716       ignored when receiving.
717 
718    Stream Identifier:  A stream identifier (see Section 5.1.1) expressed
719       as an unsigned 31-bit integer.  The value 0x0 is reserved for
720       frames that are associated with the connection as a whole as
721       opposed to an individual stream.
722 
723    The structure and content of the frame payload is dependent entirely
724    on the frame type.
725 
726 
727 
728 Belshe, et al.           Expires August 15, 2015               [Page 13]
729 
730 Internet-Draft                   HTTP/2                    February 2015
731 
732 
733 4.2.  Frame Size
734 
735    The size of a frame payload is limited by the maximum size that a
736    receiver advertises in the SETTINGS_MAX_FRAME_SIZE setting.  This
737    setting can have any value between 2^14 (16,384) and 2^24-1
738    (16,777,215) octets, inclusive.
739 
740    All implementations MUST be capable of receiving and minimally
741    processing frames up to 2^14 octets in length, plus the 9 octet frame
742    header (Section 4.1).  The size of the frame header is not included
743    when describing frame sizes.
744 
745    Note:  Certain frame types, such as PING (Section 6.7), impose
746       additional limits on the amount of payload data allowed.
747 
748    An endpoint MUST send a FRAME_SIZE_ERROR error if a frame exceeds the
749    size defined in SETTINGS_MAX_FRAME_SIZE, any limit defined for the
750    frame type, or it is too small to contain mandatory frame data.  A
751    frame size error in a frame that could alter the state of the entire
752    connection MUST be treated as a connection error (Section 5.4.1);
753    this includes any frame carrying a header block (Section 4.3) (that
754    is, HEADERS, PUSH_PROMISE, and CONTINUATION), SETTINGS, and any frame
755    with a stream identifier of 0.
756 
757    Endpoints are not obligated to use all available space in a frame.
758    Responsiveness can be improved by using frames that are smaller than
759    the permitted maximum size.  Sending large frames can result in
760    delays in sending time-sensitive frames (such as RST_STREAM,
761    WINDOW_UPDATE, or PRIORITY) which if blocked by the transmission of a
762    large frame, could affect performance.
763 
764 4.3.  Header Compression and Decompression
765 
766    Just as in HTTP/1, a header field in HTTP/2 is a name with one or
767    more associated values.  They are used within HTTP request and
768    response messages as well as server push operations (see
769    Section 8.2).
770 
771    Header lists are collections of zero or more header fields.  When
772    transmitted over a connection, a header list is serialized into a
773    header block using HTTP Header Compression [COMPRESSION].  The
774    serialized header block is then divided into one or more octet
775    sequences, called header block fragments, and transmitted within the
776    payload of HEADERS (Section 6.2), PUSH_PROMISE (Section 6.6) or
777    CONTINUATION (Section 6.10) frames.
778 
779    The Cookie header field [COOKIE] is treated specially by the HTTP
780    mapping (see Section 8.1.2.5).
781 
782 
783 
784 Belshe, et al.           Expires August 15, 2015               [Page 14]
785 
786 Internet-Draft                   HTTP/2                    February 2015
787 
788 
789    A receiving endpoint reassembles the header block by concatenating
790    its fragments, then decompresses the block to reconstruct the header
791    list.
792 
793    A complete header block consists of either:
794 
795    o  a single HEADERS or PUSH_PROMISE frame, with the END_HEADERS flag
796       set, or
797 
798    o  a HEADERS or PUSH_PROMISE frame with the END_HEADERS flag cleared
799       and one or more CONTINUATION frames, where the last CONTINUATION
800       frame has the END_HEADERS flag set.
801 
802    Header compression is stateful.  One compression context and one
803    decompression context is used for the entire connection.  A decoding
804    error in a header block MUST be treated as a connection error
805    (Section 5.4.1) of type COMPRESSION_ERROR.
806 
807    Each header block is processed as a discrete unit.  Header blocks
808    MUST be transmitted as a contiguous sequence of frames, with no
809    interleaved frames of any other type or from any other stream.  The
810    last frame in a sequence of HEADERS or CONTINUATION frames has the
811    END_HEADERS flag set.  The last frame in a sequence of PUSH_PROMISE
812    or CONTINUATION frames has the END_HEADERS flag set.  This allows a
813    header block to be logically equivalent to a single frame.
814 
815    Header block fragments can only be sent as the payload of HEADERS,
816    PUSH_PROMISE or CONTINUATION frames, because these frames carry data
817    that can modify the compression context maintained by a receiver.  An
818    endpoint receiving HEADERS, PUSH_PROMISE or CONTINUATION frames needs
819    to reassemble header blocks and perform decompression even if the
820    frames are to be discarded.  A receiver MUST terminate the connection
821    with a connection error (Section 5.4.1) of type COMPRESSION_ERROR if
822    it does not decompress a header block.
823 
824 5.  Streams and Multiplexing
825 
826    A "stream" is an independent, bi-directional sequence of frames
827    exchanged between the client and server within an HTTP/2 connection.
828    Streams have several important characteristics:
829 
830    o  A single HTTP/2 connection can contain multiple concurrently open
831       streams, with either endpoint interleaving frames from multiple
832       streams.
833 
834    o  Streams can be established and used unilaterally or shared by
835       either the client or server.
836 
837 
838 
839 
840 Belshe, et al.           Expires August 15, 2015               [Page 15]
841 
842 Internet-Draft                   HTTP/2                    February 2015
843 
844 
845    o  Streams can be closed by either endpoint.
846 
847    o  The order in which frames are sent on a stream is significant.
848       Recipients process frames in the order they are received.  In
849       particular, the order of HEADERS, and DATA frames is semantically
850       significant.
851 
852    o  Streams are identified by an integer.  Stream identifiers are
853       assigned to streams by the endpoint initiating the stream.
854 
855 5.1.  Stream States
856 
857    The lifecycle of a stream is shown in Figure 2.
858 
859 
860 
861 
862 
863 
864 
865 
866 
867 
868 
869 
870 
871 
872 
873 
874 
875 
876 
877 
878 
879 
880 
881 
882 
883 
884 
885 
886 
887 
888 
889 
890 
891 
892 
893 
894 
895 
896 Belshe, et al.           Expires August 15, 2015               [Page 16]
897 
898 Internet-Draft                   HTTP/2                    February 2015
899 
900 
901                                 +--------+
902                         send PP |        | recv PP
903                        ,--------|  idle  |--------.
904                       /         |        |         \
905                      v          +--------+          v
906               +----------+          |           +----------+
907               |          |          | send H /  |          |
908        ,------| reserved |          | recv H    | reserved |------.
909        |      | (local)  |          |           | (remote) |      |
910        |      +----------+          v           +----------+      |
911        |          |             +--------+             |          |
912        |          |     recv ES |        | send ES     |          |
913        |   send H |     ,-------|  open  |-------.     | recv H   |
914        |          |    /        |        |        \    |          |
915        |          v   v         +--------+         v   v          |
916        |      +----------+          |           +----------+      |
917        |      |   half   |          |           |   half   |      |
918        |      |  closed  |          | send R /  |  closed  |      |
919        |      | (remote) |          | recv R    | (local)  |      |
920        |      +----------+          |           +----------+      |
921        |           |                |                 |           |
922        |           | send ES /      |       recv ES / |           |
923        |           | send R /       v        send R / |           |
924        |           | recv R     +--------+   recv R   |           |
925        | send R /  `----------->|        |<-----------'  send R / |
926        | recv R                 | closed |               recv R   |
927        `----------------------->|        |<----------------------'
928                                 +--------+
929 
930           send:   endpoint sends this frame
931           recv:   endpoint receives this frame
932 
933           H:  HEADERS frame (with implied CONTINUATIONs)
934           PP: PUSH_PROMISE frame (with implied CONTINUATIONs)
935           ES: END_STREAM flag
936           R:  RST_STREAM frame
937 
938 
939                           Figure 2: Stream States
940 
941    Note that this diagram shows stream state transitions and the frames
942    and flags that affect those transitions only.  In this regard,
943    CONTINUATION frames do not result in state transitions; they are
944    effectively part of the HEADERS or PUSH_PROMISE that they follow.
945    For the purpose of state transitions, the END_STREAM flag is
946    processed as a separate event to the frame that bears it; a HEADERS
947    frame with the END_STREAM flag set can cause two state transitions.
948 
949 
950 
951 
952 Belshe, et al.           Expires August 15, 2015               [Page 17]
953 
954 Internet-Draft                   HTTP/2                    February 2015
955 
956 
957    Both endpoints have a subjective view of the state of a stream that
958    could be different when frames are in transit.  Endpoints do not
959    coordinate the creation of streams; they are created unilaterally by
960    either endpoint.  The negative consequences of a mismatch in states
961    are limited to the "closed" state after sending RST_STREAM, where
962    frames might be received for some time after closing.
963 
964    Streams have the following states:
965 
966    idle:
967       All streams start in the "idle" state.
968 
969       The following transitions are valid from this state:
970 
971       *  Sending or receiving a HEADERS frame causes the stream to
972          become "open".  The stream identifier is selected as described
973          in Section 5.1.1.  The same HEADERS frame can also cause a
974          stream to immediately become "half closed".
975 
976       *  Sending a PUSH_PROMISE frame on another stream reserves the
977          idle stream that is identified for later use.  The stream state
978          for the reserved stream transitions to "reserved (local)".
979 
980       *  Receiving a PUSH_PROMISE frame on another stream reserves an
981          idle stream that is identified for later use.  The stream state
982          for the reserved stream transitions to "reserved (remote)".
983 
984       *  Note that the PUSH_PROMISE frame is not sent on the idle
985          stream, but references the newly reserved stream in the
986          Promised Stream ID field.
987 
988       Receiving any frame other than HEADERS or PRIORITY on a stream in
989       this state MUST be treated as a connection error (Section 5.4.1)
990       of type PROTOCOL_ERROR.
991 
992    reserved (local):
993       A stream in the "reserved (local)" state is one that has been
994       promised by sending a PUSH_PROMISE frame.  A PUSH_PROMISE frame
995       reserves an idle stream by associating the stream with an open
996       stream that was initiated by the remote peer (see Section 8.2).
997 
998       In this state, only the following transitions are possible:
999 
1000       *  The endpoint can send a HEADERS frame.  This causes the stream
1001          to open in a "half closed (remote)" state.
1002 
1003       *  Either endpoint can send a RST_STREAM frame to cause the stream
1004          to become "closed".  This releases the stream reservation.
1005 
1006 
1007 
1008 Belshe, et al.           Expires August 15, 2015               [Page 18]
1009 
1010 Internet-Draft                   HTTP/2                    February 2015
1011 
1012 
1013       An endpoint MUST NOT send any type of frame other than HEADERS,
1014       RST_STREAM, or PRIORITY in this state.
1015 
1016       A PRIORITY or WINDOW_UPDATE frame MAY be received in this state.
1017       Receiving any type of frame other than RST_STREAM, PRIORITY or
1018       WINDOW_UPDATE on a stream in this state MUST be treated as a
1019       connection error (Section 5.4.1) of type PROTOCOL_ERROR.
1020 
1021    reserved (remote):
1022       A stream in the "reserved (remote)" state has been reserved by a
1023       remote peer.
1024 
1025       In this state, only the following transitions are possible:
1026 
1027       *  Receiving a HEADERS frame causes the stream to transition to
1028          "half closed (local)".
1029 
1030       *  Either endpoint can send a RST_STREAM frame to cause the stream
1031          to become "closed".  This releases the stream reservation.
1032 
1033       An endpoint MAY send a PRIORITY frame in this state to
1034       reprioritize the reserved stream.  An endpoint MUST NOT send any
1035       type of frame other than RST_STREAM, WINDOW_UPDATE, or PRIORITY in
1036       this state.
1037 
1038       Receiving any type of frame other than HEADERS, RST_STREAM or
1039       PRIORITY on a stream in this state MUST be treated as a connection
1040       error (Section 5.4.1) of type PROTOCOL_ERROR.
1041 
1042    open:
1043       A stream in the "open" state may be used by both peers to send
1044       frames of any type.  In this state, sending peers observe
1045       advertised stream level flow control limits (Section 5.2).
1046 
1047       From this state either endpoint can send a frame with an
1048       END_STREAM flag set, which causes the stream to transition into
1049       one of the "half closed" states: an endpoint sending an END_STREAM
1050       flag causes the stream state to become "half closed (local)"; an
1051       endpoint receiving an END_STREAM flag causes the stream state to
1052       become "half closed (remote)".
1053 
1054       Either endpoint can send a RST_STREAM frame from this state,
1055       causing it to transition immediately to "closed".
1056 
1057    half closed (local):
1058       A stream that is in the "half closed (local)" state cannot be used
1059       for sending frames other than WINDOW_UPDATE, PRIORITY and
1060       RST_STREAM.
1061 
1062 
1063 
1064 Belshe, et al.           Expires August 15, 2015               [Page 19]
1065 
1066 Internet-Draft                   HTTP/2                    February 2015
1067 
1068 
1069       A stream transitions from this state to "closed" when a frame that
1070       contains an END_STREAM flag is received, or when either peer sends
1071       a RST_STREAM frame.
1072 
1073       An endpoint can receive any type of frame in this state.
1074       Providing flow control credit using WINDOW_UPDATE frames is
1075       necessary to continue receiving flow controlled frames.  A
1076       receiver can ignore WINDOW_UPDATE frames in this state, which
1077       might arrive for a short period after a frame bearing the
1078       END_STREAM flag is sent.
1079 
1080       PRIORITY frames received in this state are used to reprioritize
1081       streams that depend on the identified stream.
1082 
1083    half closed (remote):
1084       A stream that is "half closed (remote)" is no longer being used by
1085       the peer to send frames.  In this state, an endpoint is no longer
1086       obligated to maintain a receiver flow control window.
1087 
1088       If an endpoint receives additional frames for a stream that is in
1089       this state, other than WINDOW_UPDATE, PRIORITY or RST_STREAM, it
1090       MUST respond with a stream error (Section 5.4.2) of type
1091       STREAM_CLOSED.
1092 
1093       A stream that is "half closed (remote)" can be used by the
1094       endpoint to send frames of any type.  In this state, the endpoint
1095       continues to observe advertised stream level flow control limits
1096       (Section 5.2).
1097 
1098       A stream can transition from this state to "closed" by sending a
1099       frame that contains an END_STREAM flag, or when either peer sends
1100       a RST_STREAM frame.
1101 
1102    closed:
1103       The "closed" state is the terminal state.
1104 
1105       An endpoint MUST NOT send frames other than PRIORITY on a closed
1106       stream.  An endpoint that receives any frame other than PRIORITY
1107       after receiving a RST_STREAM MUST treat that as a stream error
1108       (Section 5.4.2) of type STREAM_CLOSED.  Similarly, an endpoint
1109       that receives any frames after receiving a frame with the
1110       END_STREAM flag set MUST treat that as a connection error
1111       (Section 5.4.1) of type STREAM_CLOSED, unless the frame is
1112       permitted as described below.
1113 
1114       WINDOW_UPDATE or RST_STREAM frames can be received in this state
1115       for a short period after a DATA or HEADERS frame containing an
1116       END_STREAM flag is sent.  Until the remote peer receives and
1117 
1118 
1119 
1120 Belshe, et al.           Expires August 15, 2015               [Page 20]
1121 
1122 Internet-Draft                   HTTP/2                    February 2015
1123 
1124 
1125       processes RST_STREAM or the frame bearing the END_STREAM flag, it
1126       might send frames of these types.  Endpoints MUST ignore
1127       WINDOW_UPDATE or RST_STREAM frames received in this state, though
1128       endpoints MAY choose to treat frames that arrive a significant
1129       time after sending END_STREAM as a connection error
1130       (Section 5.4.1) of type PROTOCOL_ERROR.
1131 
1132       PRIORITY frames can be sent on closed streams to prioritize
1133       streams that are dependent on the closed stream.  Endpoints SHOULD
1134       process PRIORITY frames, though they can be ignored if the stream
1135       has been removed from the dependency tree (see Section 5.3.4).
1136 
1137       If this state is reached as a result of sending a RST_STREAM
1138       frame, the peer that receives the RST_STREAM might have already
1139       sent - or enqueued for sending - frames on the stream that cannot
1140       be withdrawn.  An endpoint MUST ignore frames that it receives on
1141       closed streams after it has sent a RST_STREAM frame.  An endpoint
1142       MAY choose to limit the period over which it ignores frames and
1143       treat frames that arrive after this time as being in error.
1144 
1145       Flow controlled frames (i.e., DATA) received after sending
1146       RST_STREAM are counted toward the connection flow control window.
1147       Even though these frames might be ignored, because they are sent
1148       before the sender receives the RST_STREAM, the sender will
1149       consider the frames to count against the flow control window.
1150 
1151       An endpoint might receive a PUSH_PROMISE frame after it sends
1152       RST_STREAM.  PUSH_PROMISE causes a stream to become "reserved"
1153       even if the associated stream has been reset.  Therefore, a
1154       RST_STREAM is needed to close an unwanted promised stream.
1155 
1156    In the absence of more specific guidance elsewhere in this document,
1157    implementations SHOULD treat the receipt of a frame that is not
1158    expressly permitted in the description of a state as a connection
1159    error (Section 5.4.1) of type PROTOCOL_ERROR.  Note that PRIORITY can
1160    be sent and received in any stream state.  Frames of unknown types
1161    are ignored.
1162 
1163    An example of the state transitions for an HTTP request/response
1164    exchange can be found in Section 8.1.  An example of the state
1165    transitions for server push can be found in Section 8.2.1 and
1166    Section 8.2.2.
1167 
1168 5.1.1.  Stream Identifiers
1169 
1170    Streams are identified with an unsigned 31-bit integer.  Streams
1171    initiated by a client MUST use odd-numbered stream identifiers; those
1172    initiated by the server MUST use even-numbered stream identifiers.  A
1173 
1174 
1175 
1176 Belshe, et al.           Expires August 15, 2015               [Page 21]
1177 
1178 Internet-Draft                   HTTP/2                    February 2015
1179 
1180 
1181    stream identifier of zero (0x0) is used for connection control
1182    messages; the stream identifier zero cannot be used to establish a
1183    new stream.
1184 
1185    HTTP/1.1 requests that are upgraded to HTTP/2 (see Section 3.2) are
1186    responded to with a stream identifier of one (0x1).  After the
1187    upgrade completes, stream 0x1 is "half closed (local)" to the client.
1188    Therefore, stream 0x1 cannot be selected as a new stream identifier
1189    by a client that upgrades from HTTP/1.1.
1190 
1191    The identifier of a newly established stream MUST be numerically
1192    greater than all streams that the initiating endpoint has opened or
1193    reserved.  This governs streams that are opened using a HEADERS frame
1194    and streams that are reserved using PUSH_PROMISE.  An endpoint that
1195    receives an unexpected stream identifier MUST respond with a
1196    connection error (Section 5.4.1) of type PROTOCOL_ERROR.
1197 
1198    The first use of a new stream identifier implicitly closes all
1199    streams in the "idle" state that might have been initiated by that
1200    peer with a lower-valued stream identifier.  For example, if a client
1201    sends a HEADERS frame on stream 7 without ever sending a frame on
1202    stream 5, then stream 5 transitions to the "closed" state when the
1203    first frame for stream 7 is sent or received.
1204 
1205    Stream identifiers cannot be reused.  Long-lived connections can
1206    result in an endpoint exhausting the available range of stream
1207    identifiers.  A client that is unable to establish a new stream
1208    identifier can establish a new connection for new streams.  A server
1209    that is unable to establish a new stream identifier can send a GOAWAY
1210    frame so that the client is forced to open a new connection for new
1211    streams.
1212 
1213 5.1.2.  Stream Concurrency
1214 
1215    A peer can limit the number of concurrently active streams using the
1216    SETTINGS_MAX_CONCURRENT_STREAMS parameter (see Section 6.5.2) within
1217    a SETTINGS frame.  The maximum concurrent streams setting is specific
1218    to each endpoint and applies only to the peer that receives the
1219    setting.  That is, clients specify the maximum number of concurrent
1220    streams the server can initiate, and servers specify the maximum
1221    number of concurrent streams the client can initiate.
1222 
1223    Streams that are in the "open" state, or either of the "half closed"
1224    states count toward the maximum number of streams that an endpoint is
1225    permitted to open.  Streams in any of these three states count toward
1226    the limit advertised in the SETTINGS_MAX_CONCURRENT_STREAMS setting.
1227    Streams in either of the "reserved" states do not count toward the
1228    stream limit.
1229 
1230 
1231 
1232 Belshe, et al.           Expires August 15, 2015               [Page 22]
1233 
1234 Internet-Draft                   HTTP/2                    February 2015
1235 
1236 
1237    Endpoints MUST NOT exceed the limit set by their peer.  An endpoint
1238    that receives a HEADERS frame that causes their advertised concurrent
1239    stream limit to be exceeded MUST treat this as a stream error
1240    (Section 5.4.2) of type PROTOCOL_ERROR or REFUSED_STREAM.  The choice
1241    of error code determines whether the endpoint wishes to enable
1242    automatic retry, see Section 8.1.4) for details.
1243 
1244    An endpoint that wishes to reduce the value of
1245    SETTINGS_MAX_CONCURRENT_STREAMS to a value that is below the current
1246    number of open streams can either close streams that exceed the new
1247    value or allow streams to complete.
1248 
1249 5.2.  Flow Control
1250 
1251    Using streams for multiplexing introduces contention over use of the
1252    TCP connection, resulting in blocked streams.  A flow control scheme
1253    ensures that streams on the same connection do not destructively
1254    interfere with each other.  Flow control is used for both individual
1255    streams and for the connection as a whole.
1256 
1257    HTTP/2 provides for flow control through use of the WINDOW_UPDATE
1258    frame (Section 6.9).
1259 
1260 5.2.1.  Flow Control Principles
1261 
1262    HTTP/2 stream flow control aims to allow a variety of flow control
1263    algorithms to be used without requiring protocol changes.  Flow
1264    control in HTTP/2 has the following characteristics:
1265 
1266    1.  Flow control is specific to a connection.  Both types of flow
1267        control are between the endpoints of a single hop, and not over
1268        the entire end-to-end path.
1269 
1270    2.  Flow control is based on window update frames.  Receivers
1271        advertise how many octets they are prepared to receive on a
1272        stream and for the entire connection.  This is a credit-based
1273        scheme.
1274 
1275    3.  Flow control is directional with overall control provided by the
1276        receiver.  A receiver MAY choose to set any window size that it
1277        desires for each stream and for the entire connection.  A sender
1278        MUST respect flow control limits imposed by a receiver.  Clients,
1279        servers and intermediaries all independently advertise their flow
1280        control window as a receiver and abide by the flow control limits
1281        set by their peer when sending.
1282 
1283    4.  The initial value for the flow control window is 65,535 octets
1284        for both new streams and the overall connection.
1285 
1286 
1287 
1288 Belshe, et al.           Expires August 15, 2015               [Page 23]
1289 
1290 Internet-Draft                   HTTP/2                    February 2015
1291 
1292 
1293    5.  The frame type determines whether flow control applies to a
1294        frame.  Of the frames specified in this document, only DATA
1295        frames are subject to flow control; all other frame types do not
1296        consume space in the advertised flow control window.  This
1297        ensures that important control frames are not blocked by flow
1298        control.
1299 
1300    6.  Flow control cannot be disabled.
1301 
1302    7.  HTTP/2 defines only the format and semantics of the WINDOW_UPDATE
1303        frame (Section 6.9).  This document does not stipulate how a
1304        receiver decides when to send this frame or the value that it
1305        sends, nor does it specify how a sender chooses to send packets.
1306        Implementations are able to select any algorithm that suits their
1307        needs.
1308 
1309    Implementations are also responsible for managing how requests and
1310    responses are sent based on priority; choosing how to avoid head of
1311    line blocking for requests; and managing the creation of new streams.
1312    Algorithm choices for these could interact with any flow control
1313    algorithm.
1314 
1315 5.2.2.  Appropriate Use of Flow Control
1316 
1317    Flow control is defined to protect endpoints that are operating under
1318    resource constraints.  For example, a proxy needs to share memory
1319    between many connections, and also might have a slow upstream
1320    connection and a fast downstream one.  Flow control addresses cases
1321    where the receiver is unable to process data on one stream, yet wants
1322    to continue to process other streams in the same connection.
1323 
1324    Deployments that do not require this capability can advertise a flow
1325    control window of the maximum size (2^31-1), and by maintaining this
1326    window by sending a WINDOW_UPDATE frame when any data is received.
1327    This effectively disables flow control for that receiver.
1328    Conversely, a sender is always subject to the flow control window
1329    advertised by the receiver.
1330 
1331    Deployments with constrained resources (for example, memory) can
1332    employ flow control to limit the amount of memory a peer can consume.
1333    Note, however, that this can lead to suboptimal use of available
1334    network resources if flow control is enabled without knowledge of the
1335    bandwidth-delay product (see [RFC7323]).
1336 
1337    Even with full awareness of the current bandwidth-delay product,
1338    implementation of flow control can be difficult.  When using flow
1339    control, the receiver MUST read from the TCP receive buffer in a
1340 
1341 
1342 
1343 
1344 Belshe, et al.           Expires August 15, 2015               [Page 24]
1345 
1346 Internet-Draft                   HTTP/2                    February 2015
1347 
1348 
1349    timely fashion.  Failure to do so could lead to a deadlock when
1350    critical frames, such as WINDOW_UPDATE, are not read and acted upon.
1351 
1352 5.3.  Stream priority
1353 
1354    A client can assign a priority for a new stream by including
1355    prioritization information in the HEADERS frame (Section 6.2) that
1356    opens the stream.  At any other time, the PRIORITY frame
1357    (Section 6.3) can be used to change the priority of a stream.
1358 
1359    The purpose of prioritization is to allow an endpoint to express how
1360    it would prefer its peer allocate resources when managing concurrent
1361    streams.  Most importantly, priority can be used to select streams
1362    for transmitting frames when there is limited capacity for sending.
1363 
1364    Streams can be prioritized by marking them as dependent on the
1365    completion of other streams (Section 5.3.1).  Each dependency is
1366    assigned a relative weight, a number that is used to determine the
1367    relative proportion of available resources that are assigned to
1368    streams dependent on the same stream.
1369 
1370    Explicitly setting the priority for a stream is input to a
1371    prioritization process.  It does not guarantee any particular
1372    processing or transmission order for the stream relative to any other
1373    stream.  An endpoint cannot force a peer to process concurrent
1374    streams in a particular order using priority.  Expressing priority is
1375    therefore only ever a suggestion.
1376 
1377    Prioritization information can be omitted from messages.  Defaults
1378    are used prior to any explicit values being provided (Section 5.3.5).
1379 
1380 5.3.1.  Stream Dependencies
1381 
1382    Each stream can be given an explicit dependency on another stream.
1383    Including a dependency expresses a preference to allocate resources
1384    to the identified stream rather than to the dependent stream.
1385 
1386    A stream that is not dependent on any other stream is given a stream
1387    dependency of 0x0.  In other words, the non-existent stream 0 forms
1388    the root of the tree.
1389 
1390    A stream that depends on another stream is a dependent stream.  The
1391    stream upon which a stream is dependent is a parent stream.  A
1392    dependency on a stream that is not currently in the tree - such as a
1393    stream in the "idle" state - results in that stream being given a
1394    default priority (Section 5.3.5).
1395 
1396 
1397 
1398 
1399 
1400 Belshe, et al.           Expires August 15, 2015               [Page 25]
1401 
1402 Internet-Draft                   HTTP/2                    February 2015
1403 
1404 
1405    When assigning a dependency on another stream, the stream is added as
1406    a new dependency of the parent stream.  Dependent streams that share
1407    the same parent are not ordered with respect to each other.  For
1408    example, if streams B and C are dependent on stream A, and if stream
1409    D is created with a dependency on stream A, this results in a
1410    dependency order of A followed by B, C, and D in any order.
1411 
1412        A                 A
1413       / \      ==>      /|\
1414      B   C             B D C
1415 
1416              Figure 3: Example of Default Dependency Creation
1417 
1418    An exclusive flag allows for the insertion of a new level of
1419    dependencies.  The exclusive flag causes the stream to become the
1420    sole dependency of its parent stream, causing other dependencies to
1421    become dependent on the exclusive stream.  In the previous example,
1422    if stream D is created with an exclusive dependency on stream A, this
1423    results in D becoming the dependency parent of B and C.
1424 
1425                          A
1426        A                 |
1427       / \      ==>       D
1428      B   C              / \
1429                        B   C
1430 
1431             Figure 4: Example of Exclusive Dependency Creation
1432 
1433    Inside the dependency tree, a dependent stream SHOULD only be
1434    allocated resources if all of the streams that it depends on (the
1435    chain of parent streams up to 0x0) are either closed, or it is not
1436    possible to make progress on them.
1437 
1438    A stream cannot depend on itself.  An endpoint MUST treat this as a
1439    stream error (Section 5.4.2) of type PROTOCOL_ERROR.
1440 
1441 5.3.2.  Dependency Weighting
1442 
1443    All dependent streams are allocated an integer weight between 1 and
1444    256 (inclusive).
1445 
1446    Streams with the same parent SHOULD be allocated resources
1447    proportionally based on their weight.  Thus, if stream B depends on
1448    stream A with weight 4, and C depends on stream A with weight 12, and
1449    if no progress can be made on A, stream B ideally receives one third
1450    of the resources allocated to stream C.
1451 
1452 
1453 
1454 
1455 
1456 Belshe, et al.           Expires August 15, 2015               [Page 26]
1457 
1458 Internet-Draft                   HTTP/2                    February 2015
1459 
1460 
1461 5.3.3.  Reprioritization
1462 
1463    Stream priorities are changed using the PRIORITY frame.  Setting a
1464    dependency causes a stream to become dependent on the identified
1465    parent stream.
1466 
1467    Dependent streams move with their parent stream if the parent is
1468    reprioritized.  Setting a dependency with the exclusive flag for a
1469    reprioritized stream moves all the dependencies of the new parent
1470    stream to become dependent on the reprioritized stream.
1471 
1472    If a stream is made dependent on one of its own dependencies, the
1473    formerly dependent stream is first moved to be dependent on the
1474    reprioritized stream's previous parent.  The moved dependency retains
1475    its weight.
1476 
1477    For example, consider an original dependency tree where B and C
1478    depend on A, D and E depend on C, and F depends on D.  If A is made
1479    dependent on D, then D takes the place of A.  All other dependency
1480    relationships stay the same, except for F, which becomes dependent on
1481    A if the reprioritization is exclusive.
1482 
1483        ?                ?                ?                 ?
1484        |               / \               |                 |
1485        A              D   A              D                 D
1486       / \            /   / \            / \                |
1487      B   C     ==>  F   B   C   ==>    F   A       OR      A
1488         / \                 |             / \             /|\
1489        D   E                E            B   C           B C F
1490        |                                     |             |
1491        F                                     E             E
1492                   (intermediate)   (non-exclusive)    (exclusive)
1493 
1494                 Figure 5: Example of Dependency Reordering
1495 
1496 5.3.4.  Prioritization State Management
1497 
1498    When a stream is removed from the dependency tree, its dependencies
1499    can be moved to become dependent on the parent of the closed stream.
1500    The weights of new dependencies are recalculated by distributing the
1501    weight of the dependency of the closed stream proportionally based on
1502    the weights of its dependencies.
1503 
1504    Streams that are removed from the dependency tree cause some
1505    prioritization information to be lost.  Resources are shared between
1506    streams with the same parent stream, which means that if a stream in
1507  any spare capacity allocated to a   that set closes or becomes blocked,
1508    stream is distributed to the immediate neighbors of the stream.
1509 
1510 
1511 
1512 Belshe, et al.           Expires August 15, 2015               [Page 27]
1513 
1514 Internet-Draft                   HTTP/2                    February 2015
1515 
1516 
1517    However, if the common dependency is removed from the tree, those
1518    streams share resources with streams at the next highest level.
1519 
1520    For example, assume streams A and B share a parent, and streams C and
1521    D both depend on stream A.  Prior to the removal of stream A, if
1522    streams A and D are unable to proceed, then stream C receives all the
1523    resources dedicated to stream A.  If stream A is removed from the
1524    tree, the weight of stream A is divided between streams C and D.  If
1525    stream D is still unable to proceed, this results in stream C
1526    receiving a reduced proportion of resources.  For equal starting
1527    weights, C receives one third, rather than one half, of available
1528    resources.
1529 
1530    It is possible for a stream to become closed while prioritization
1531    information that creates a dependency on that stream is in transit.
1532    If a stream identified in a dependency has no associated priority
1533    information, then the dependent stream is instead assigned a default
1534    priority (Section 5.3.5).  This potentially creates suboptimal
1535    prioritization, since the stream could be given a priority that is
1536    different to what is intended.
1537 
1538    To avoid these problems, an endpoint SHOULD retain stream
1539    prioritization state for a period after streams become closed.  The
1540    longer state is retained, the lower the chance that streams are
1541    assigned incorrect or default priority values.
1542 
1543    Similarly, streams that are in the "idle" state can be assigned
1544    priority or become a parent of other streams.  This allows for the
1545    creation of a grouping node in the dependency tree, which enables
1546    more flexible expressions of priority.  Idle streams begin with a
1547    default priority (Section 5.3.5).
1548 
1549    The retention of priority information for streams that are not
1550    counted toward the limit set by SETTINGS_MAX_CONCURRENT_STREAMS could
1551    create a large state burden for an endpoint.  Therefore the amount of
1552    prioritization state that is retained MAY be limited.
1553 
1554    The amount of additional state an endpoint maintains for
1555    prioritization could be dependent on load; under high load,
1556    prioritization state can be discarded to limit resource commitments.
1557    In extreme cases, an endpoint could even discard prioritization state
1558    for active or reserved streams.  If a limit is applied, endpoints
1559    SHOULD maintain state for at least as many streams as allowed by
1560    their setting for SETTINGS_MAX_CONCURRENT_STREAMS.  Implementations
1561    SHOULD also attempt to retain state for streams that are in active
1562    use in the priority tree.
1563 
1564 
1565 
1566 
1567 
1568 Belshe, et al.           Expires August 15, 2015               [Page 28]
1569 
1570 Internet-Draft                   HTTP/2                    February 2015
1571 
1572 
1573    An endpoint receiving a PRIORITY frame that changes the priority of a
1574    closed stream SHOULD alter the dependencies of the streams that
1575    depend on it, if it has retained enough state to do so.
1576 
1577 5.3.5.  Default Priorities
1578 
1579    All streams are initially assigned a non-exclusive dependency on
1580    stream 0x0.  Pushed streams (Section 8.2) initially depend on their
1581    associated stream.  In both cases, streams are assigned a default
1582    weight of 16.
1583 
1584 5.4.  Error Handling
1585 
1586    HTTP/2 framing permits two classes of error:
1587 
1588    o  An error condition that renders the entire connection unusable is
1589       a connection error.
1590 
1591    o  An error in an individual stream is a stream error.
1592 
1593    A list of error codes is included in Section 7.
1594 
1595 5.4.1.  Connection Error Handling
1596 
1597    A connection error is any error which prevents further processing of
1598    the framing layer, or which corrupts any connection state.
1599 
1600    An endpoint that encounters a connection error SHOULD first send a
1601    GOAWAY frame (Section 6.8) with the stream identifier of the last
1602    stream that it successfully received from its peer.  The GOAWAY frame
1603    includes an error code that indicates why the connection is
1604    terminating.  After sending the GOAWAY frame for an error condition,
1605    the endpoint MUST close the TCP connection.
1606 
1607    It is possible that the GOAWAY will not be reliably received by the
1608    receiving endpoint (see [RFC7230], Section 6.6).  In the event of a
1609    connection error, GOAWAY only provides a best effort attempt to
1610    communicate with the peer about why the connection is being
1611    terminated.
1612 
1613    An endpoint can end a connection at any time.  In particular, an
1614    endpoint MAY choose to treat a stream error as a connection error.
1615    Endpoints SHOULD send a GOAWAY frame when ending a connection,
1616    providing that circumstances permit it.
1617 
1618 
1619 
1620 
1621 
1622 
1623 
1624 Belshe, et al.           Expires August 15, 2015               [Page 29]
1625 
1626 Internet-Draft                   HTTP/2                    February 2015
1627 
1628 
1629 5.4.2.  Stream Error Handling
1630 
1631    A stream error is an error related to a specific stream that does not
1632    affect processing of other streams.
1633 
1634    An endpoint that detects a stream error sends a RST_STREAM frame
1635    (Section 6.4) that contains the stream identifier of the stream where
1636    the error occurred.  The RST_STREAM frame includes an error code that
1637    indicates the type of error.
1638 
1639    A RST_STREAM is the last frame that an endpoint can send on a stream.
1640    The peer that sends the RST_STREAM frame MUST be prepared to receive
1641    any frames that were sent or enqueued for sending by the remote peer.
1642    These frames can be ignored, except where they modify connection
1643    state (such as the state maintained for header compression
1644    (Section 4.3), or flow control).
1645 
1646    Normally, an endpoint SHOULD NOT send more than one RST_STREAM frame
1647    for any stream.  However, an endpoint MAY send additional RST_STREAM
1648    frames if it receives frames on a closed stream after more than a
1649    round-trip time.  This behavior is permitted to deal with misbehaving
1650    implementations.
1651 
1652    An endpoint MUST NOT send a RST_STREAM in response to a RST_STREAM
1653    frame, to avoid looping.
1654 
1655 5.4.3.  Connection Termination
1656 
1657    If the TCP connection is closed or reset while streams remain in open
1658    or half closed states, then the affected streams cannot be
1659    automatically retried (see Section 8.1.4 for details).
1660 
1661 5.5.  Extending HTTP/2
1662 
1663    HTTP/2 permits extension of the protocol.  Protocol extensions can be
1664    used to provide additional services or alter any aspect of the
1665    protocol, within the limitations described in this section.
1666    Extensions are effective only within the scope of a single HTTP/2
1667    connection.
1668 
1669    This applies to the protocol elements defined in this document.  This
1670    does not affect the existing options for extending HTTP, such as
1671    defining new methods, status codes, or header fields.
1672 
1673    Extensions are permitted to use new frame types (Section 4.1), new
1674    settings (Section 6.5.2), or new error codes (Section 7).  Registries
1675    are established for managing these extension points: frame types
1676 
1677 
1678 
1679 
1680 Belshe, et al.           Expires August 15, 2015               [Page 30]
1681 
1682 Internet-Draft                   HTTP/2                    February 2015
1683 
1684 
1685    (Section 11.2), settings (Section 11.3) and error codes
1686    (Section 11.4).
1687 
1688    Implementations MUST ignore unknown or unsupported values in all
1689    extensible protocol elements.  Implementations MUST discard frames
1690    that have unknown or unsupported types.  This means that any of these
1691    extension points can be safely used by extensions without prior
1692    arrangement or negotiation.  However, extension frames that appear in
1693    the middle of a header block (Section 4.3) are not permitted; these
1694    MUST be treated as a connection error (Section 5.4.1) of type
1695    PROTOCOL_ERROR.
1696 
1697    Extensions that could change the semantics of existing protocol
1698    components MUST be negotiated before being used.  For example, an
1699    extension that changes the layout of the HEADERS frame cannot be used
1700    until the peer has given a positive signal that this is acceptable.
1701    In this case, it could also be necessary to coordinate when the
1702    revised layout comes into effect.  Note that treating any frame other
1703    than DATA frames as flow controlled is such a change in semantics,
1704    and can only be done through negotiation.
1705 
1706    This document doesn't mandate a specific method for negotiating the
1707    use of an extension, but notes that a setting (Section 6.5.2) could
1708    be used for that purpose.  If both peers set a value that indicates
1709    willingness to use the extension, then the extension can be used.  If
1710    a setting is used for extension negotiation, the initial value MUST
1711    be defined in such a fashion that the extension is initially
1712    disabled.
1713 
1714 6.  Frame Definitions
1715 
1716    This specification defines a number of frame types, each identified
1717    by a unique 8-bit type code.  Each frame type serves a distinct
1718    purpose either in the establishment and management of the connection
1719    as a whole, or of individual streams.
1720 
1721    The transmission of specific frame types can alter the state of a
1722    connection.  If endpoints fail to maintain a synchronized view of the
1723    connection state, successful communication within the connection will
1724    no longer be possible.  Therefore, it is important that endpoints
1725    have a shared comprehension of how the state is affected by the use
1726    any given frame.
1727 
1728 6.1.  DATA
1729 
1730    DATA frames (type=0x0) convey arbitrary, variable-length sequences of
1731    octets associated with a stream.  One or more DATA frames are used,
1732    for instance, to carry HTTP request or response payloads.
1733 
1734 
1735 
1736 Belshe, et al.           Expires August 15, 2015               [Page 31]
1737 
1738 Internet-Draft                   HTTP/2                    February 2015
1739 
1740 
1741    DATA frames MAY also contain padding.  Padding can be added to DATA
1742    frames to obscure the size of messages.  Padding is a security
1743    feature; see Section 10.7.
1744 
1745     +---------------+
1746     |Pad Length? (8)|
1747     +---------------+-----------------------------------------------+
1748     |                            Data (*)                         ...
1749     +---------------------------------------------------------------+
1750     |                           Padding (*)                       ...
1751     +---------------------------------------------------------------+
1752 
1753                        Figure 6: DATA Frame Payload
1754 
1755    The DATA frame contains the following fields:
1756 
1757    Pad Length:  An 8-bit field containing the length of the frame
1758       padding in units of octets.  This field is conditional and is only
1759       present if the PADDED flag is set.
1760 
1761    Data:  Application data.  The amount of data is the remainder of the
1762       frame payload after subtracting the length of the other fields
1763       that are present.
1764 
1765    Padding:  Padding octets that contain no application semantic value.
1766       Padding octets MUST be set to zero when sending.  A receiver is
1767       not obligated to verify padding, but MAY treat non-zero padding as
1768       a connection error (Section 5.4.1) of type PROTOCOL_ERROR.
1769 
1770    The DATA frame defines the following flags:
1771 
1772    END_STREAM (0x1):  Bit 0 being set indicates that this frame is the
1773       last that the endpoint will send for the identified stream.
1774       Setting this flag causes the stream to enter one of the "half
1775       closed" states or the "closed" state (Section 5.1).
1776 
1777    PADDED (0x8):  Bit 3 being set indicates that the Pad Length field
1778       and any padding that it describes is present.
1779 
1780    DATA frames MUST be associated with a stream.  If a DATA frame is
1781    received whose stream identifier field is 0x0, the recipient MUST
1782    respond with a connection error (Section 5.4.1) of type
1783    PROTOCOL_ERROR.
1784 
1785    DATA frames are subject to flow control and can only be sent when a
1786    stream is in the "open" or "half closed (remote)" states.  The entire
1787    DATA frame payload is included in flow control, including Pad Length
1788    and Padding fields if present.  If a DATA frame is received whose
1789 
1790 
1791 
1792 Belshe, et al.           Expires August 15, 2015               [Page 32]
1793 
1794 Internet-Draft                   HTTP/2                    February 2015
1795 
1796 
1797    stream is not in "open" or "half closed (local)" state, the recipient
1798    MUST respond with a stream error (Section 5.4.2) of type
1799    STREAM_CLOSED.
1800 
1801    The total number of padding octets is determined by the value of the
1802    Pad Length field.  If the length of the padding is the length of the
1803    frame payload or greater, the recipient MUST treat this as a
1804    connection error (Section 5.4.1) of type PROTOCOL_ERROR.
1805 
1806    Note:  A frame can be increased in size by one octet by including a
1807       Pad Length field with a value of zero.
1808 
1809 6.2.  HEADERS
1810 
1811    The HEADERS frame (type=0x1) is used to open a stream (Section 5.1),
1812    and additionally carries a header block fragment.  HEADERS frames can
1813    be sent on a stream in the "open" or "half closed (remote)" states.
1814 
1815     +---------------+
1816     |Pad Length? (8)|
1817     +-+-------------+-----------------------------------------------+
1818     |E|                 Stream Dependency? (31)                     |
1819     +-+-------------+-----------------------------------------------+
1820     |  Weight? (8)  |
1821     +-+-------------+-----------------------------------------------+
1822     |                   Header Block Fragment (*)                 ...
1823     +---------------------------------------------------------------+
1824     |                           Padding (*)                       ...
1825     +---------------------------------------------------------------+
1826 
1827                       Figure 7: HEADERS Frame Payload
1828 
1829    The HEADERS frame payload has the following fields:
1830 
1831    Pad Length:  An 8-bit field containing the length of the frame
1832       padding in units of octets.  This field is only present if the
1833       PADDED flag is set.
1834 
1835    E: A single bit flag indicates that the stream dependency is
1836       exclusive, see Section 5.3.  This field is only present if the
1837       PRIORITY flag is set.
1838 
1839    Stream Dependency:  A 31-bit stream identifier for the stream that
1840       this stream depends on, see Section 5.3.  This field is only
1841       present if the PRIORITY flag is set.
1842 
1843    Weight:  An unsigned 8-bit integer representing a priority weight for
1844       the stream, see Section 5.3.  Add one to the value to obtain a
1845 
1846 
1847 
1848 Belshe, et al.           Expires August 15, 2015               [Page 33]
1849 
1850 Internet-Draft                   HTTP/2                    February 2015
1851 
1852 
1853       weight between 1 and 256.  This field is only present if the
1854       PRIORITY flag is set.
1855 
1856    Header Block Fragment:  A header block fragment (Section 4.3).
1857 
1858    Padding:  Padding octets.
1859 
1860    The HEADERS frame defines the following flags:
1861 
1862    END_STREAM (0x1):  Bit 0 being set indicates that the header block
1863       (Section 4.3) is the last that the endpoint will send for the
1864       identified stream.
1865 
1866       A HEADERS frame carries the END_STREAM flag that signals the end
1867       of a stream.  However, a HEADERS frame with the END_STREAM flag
1868       set can be followed by CONTINUATION frames on the same stream.
1869       Logically, the CONTINUATION frames are part of the HEADERS frame.
1870 
1871    END_HEADERS (0x4):  Bit 2 being set indicates that this frame
1872       contains an entire header block (Section 4.3) and is not followed
1873       by any CONTINUATION frames.
1874 
1875       A HEADERS frame without the END_HEADERS flag set MUST be followed
1876       by a CONTINUATION frame for the same stream.  A receiver MUST
1877       treat the receipt of any other type of frame or a frame on a
1878       different stream as a connection error (Section 5.4.1) of type
1879       PROTOCOL_ERROR.
1880 
1881    PADDED (0x8):  Bit 3 being set indicates that the Pad Length field
1882       and any padding that it describes is present.
1883 
1884    PRIORITY (0x20):  Bit 5 being set indicates that the Exclusive Flag
1885       (E), Stream Dependency, and Weight fields are present; see
1886       Section 5.3.
1887 
1888    The payload of a HEADERS frame contains a header block fragment
1889    (Section 4.3).  A header block that does not fit within a HEADERS
1890    frame is continued in a CONTINUATION frame (Section 6.10).
1891 
1892    HEADERS frames MUST be associated with a stream.  If a HEADERS frame
1893    is received whose stream identifier field is 0x0, the recipient MUST
1894    respond with a connection error (Section 5.4.1) of type
1895    PROTOCOL_ERROR.
1896 
1897    The HEADERS frame changes the connection state as described in
1898    Section 4.3.
1899 
1900 
1901 
1902 
1903 
1904 Belshe, et al.           Expires August 15, 2015               [Page 34]
1905 
1906 Internet-Draft                   HTTP/2                    February 2015
1907 
1908 
1909    The HEADERS frame can include padding.  Padding fields and flags are
1910    identical to those defined for DATA frames (Section 6.1).
1911 
1912    Prioritization information in a HEADERS frame is logically equivalent
1913    to a separate PRIORITY frame, but inclusion in HEADERS avoids the
1914    potential for churn in stream prioritization when new streams are
1915    created.  Prioritization fields in HEADERS frames subsequent to the
1916    first on a stream reprioritize the stream (Section 5.3.3).
1917 
1918 6.3.  PRIORITY
1919 
1920    The PRIORITY frame (type=0x2) specifies the sender-advised priority
1921    of a stream (Section 5.3).  It can be sent at any time for any
1922    stream, including idle or closed streams.
1923 
1924     +-+-------------------------------------------------------------+
1925     |E|                  Stream Dependency (31)                     |
1926     +-+-------------+-----------------------------------------------+
1927     |   Weight (8)  |
1928     +-+-------------+
1929 
1930                      Figure 8: PRIORITY Frame Payload
1931 
1932    The payload of a PRIORITY frame contains the following fields:
1933 
1934    E: A single bit flag indicates that the stream dependency is
1935       exclusive, see Section 5.3.
1936 
1937    Stream Dependency:  A 31-bit stream identifier for the stream that
1938       this stream depends on, see Section 5.3.
1939 
1940    Weight:  An unsigned 8-bit integer representing a priority weight for
1941       the stream, see Section 5.3.  Add one to the value to obtain a
1942       weight between 1 and 256.
1943 
1944    The PRIORITY frame does not define any flags.
1945 
1946    The PRIORITY frame always identifies a stream.  If a PRIORITY frame
1947    is received with a stream identifier of 0x0, the recipient MUST
1948    respond with a connection error (Section 5.4.1) of type
1949    PROTOCOL_ERROR.
1950 
1951    The PRIORITY frame can be sent on a stream in any state, though it
1952    cannot be sent between consecutive frames that comprise a single
1953    header block (Section 4.3).  Note that this frame could arrive after
1954    processing or frame sending has completed, which would cause it to
1955    have no effect on the identified stream.  For a stream that is in the
1956    "half closed (remote)" or "closed" - state, this frame can only
1957 
1958 
1959 
1960 Belshe, et al.           Expires August 15, 2015               [Page 35]
1961 
1962 Internet-Draft                   HTTP/2                    February 2015
1963 
1964 
1965    affect processing of the identified stream and its dependent streams
1966    and not frame transmission on that stream.
1967 
1968    The PRIORITY frame can be sent for a stream in the "idle" or "closed"
1969    states.  This allows for the reprioritization of a group of dependent
1970    streams by altering the priority of an unused or closed parent
1971    stream.
1972 
1973    A PRIORITY frame with a length other than 5 octets MUST be treated as
1974    a stream error (Section 5.4.2) of type FRAME_SIZE_ERROR.
1975 
1976 6.4.  RST_STREAM
1977 
1978    The RST_STREAM frame (type=0x3) allows for immediate termination of a
1979    stream.  RST_STREAM is sent to request cancellation of a stream, or
1980    to indicate that an error condition has occurred.
1981 
1982     +---------------------------------------------------------------+
1983     |                        Error Code (32)                        |
1984     +---------------------------------------------------------------+
1985 
1986                     Figure 9: RST_STREAM Frame Payload
1987 
1988    The RST_STREAM frame contains a single unsigned, 32-bit integer
1989    identifying the error code (Section 7).  The error code indicates why
1990    the stream is being terminated.
1991 
1992    The RST_STREAM frame does not define any flags.
1993 
1994    The RST_STREAM frame fully terminates the referenced stream and
1995    causes it to enter the closed state.  After receiving a RST_STREAM on
1996    a stream, the receiver MUST NOT send additional frames for that
1997    stream, with the exception of PRIORITY.  However, after sending the
1998    RST_STREAM, the sending endpoint MUST be prepared to receive and
1999    process additional frames sent on the stream that might have been
2000    sent by the peer prior to the arrival of the RST_STREAM.
2001 
2002    RST_STREAM frames MUST be associated with a stream.  If a RST_STREAM
2003    frame is received with a stream identifier of 0x0, the recipient MUST
2004    treat this as a connection error (Section 5.4.1) of type
2005    PROTOCOL_ERROR.
2006 
2007    RST_STREAM frames MUST NOT be sent for a stream in the "idle" state.
2008    If a RST_STREAM frame identifying an idle stream is received, the
2009    recipient MUST treat this as a connection error (Section 5.4.1) of
2010    type PROTOCOL_ERROR.
2011 
2012 
2013 
2014 
2015 
2016 Belshe, et al.           Expires August 15, 2015               [Page 36]
2017 
2018 Internet-Draft                   HTTP/2                    February 2015
2019 
2020 
2021    A RST_STREAM frame with a length other than 4 octets MUST be treated
2022    as a connection error (Section 5.4.1) of type FRAME_SIZE_ERROR.
2023 
2024 6.5.  SETTINGS
2025 
2026    The SETTINGS frame (type=0x4) conveys configuration parameters that
2027    affect how endpoints communicate, such as preferences and constraints
2028    on peer behavior.  The SETTINGS frame is also used to acknowledge the
2029    receipt of those parameters.  Individually, a SETTINGS parameter can
2030    also be referred to as a "setting".
2031 
2032    SETTINGS parameters are not negotiated; they describe characteristics
2033    of the sending peer, which are used by the receiving peer.  Different
2034    values for the same parameter can be advertised by each peer.  For
2035    example, a client might set a high initial flow control window,
2036    whereas a server might set a lower value to conserve resources.
2037 
2038    A SETTINGS frame MUST be sent by both endpoints at the start of a
2039    connection, and MAY be sent at any other time by either endpoint over
2040    the lifetime of the connection.  Implementations MUST support all of
2041    the parameters defined by this specification.
2042 
2043    Each parameter in a SETTINGS frame replaces any existing value for
2044    that parameter.  Parameters are processed in the order in which they
2045    appear, and a receiver of a SETTINGS frame does not need to maintain
2046    any state other than the current value of its parameters.  Therefore,
2047    the value of a SETTINGS parameter is the last value that is seen by a
2048    receiver.
2049 
2050    SETTINGS parameters are acknowledged by the receiving peer.  To
2051    enable this, the SETTINGS frame defines the following flag:
2052 
2053    ACK (0x1):  Bit 0 being set indicates that this frame acknowledges
2054       receipt and application of the peer's SETTINGS frame.  When this
2055       bit is set, the payload of the SETTINGS frame MUST be empty.
2056       Receipt of a SETTINGS frame with the ACK flag set and a length
2057       field value other than 0 MUST be treated as a connection error
2058       (Section 5.4.1) of type FRAME_SIZE_ERROR.  For more info, see
2059       Settings Synchronization (Section 6.5.3).
2060 
2061    SETTINGS frames always apply to a connection, never a single stream.
2062    The stream identifier for a SETTINGS frame MUST be zero (0x0).  If an
2063    endpoint receives a SETTINGS frame whose stream identifier field is
2064    anything other than 0x0, the endpoint MUST respond with a connection
2065    error (Section 5.4.1) of type PROTOCOL_ERROR.
2066 
2067 
2068 
2069 
2070 
2071 
2072 Belshe, et al.           Expires August 15, 2015               [Page 37]
2073 
2074 Internet-Draft                   HTTP/2                    February 2015
2075 
2076 
2077    The SETTINGS frame affects connection state.  A badly formed or
2078    incomplete SETTINGS frame MUST be treated as a connection error
2079    (Section 5.4.1) of type PROTOCOL_ERROR.
2080 
2081    A SETTINGS frame with a length other than a multiple of 6 octets MUST
2082    be treated as a connection error (Section 5.4.1) of type
2083    FRAME_SIZE_ERROR.
2084 
2085 6.5.1.  SETTINGS Format
2086 
2087    The payload of a SETTINGS frame consists of zero or more parameters,
2088    each consisting of an unsigned 16-bit setting identifier and an
2089    unsigned 32-bit value.
2090 
2091     +-------------------------------+
2092     |       Identifier (16)         |
2093     +-------------------------------+-------------------------------+
2094     |                        Value (32)                             |
2095     +---------------------------------------------------------------+
2096 
2097                          Figure 10: Setting Format
2098 
2099 6.5.2.  Defined SETTINGS Parameters
2100 
2101    The following parameters are defined:
2102 
2103    SETTINGS_HEADER_TABLE_SIZE (0x1):  Allows the sender to inform the
2104       remote endpoint of the maximum size of the header compression
2105       table used to decode header blocks, in octets.  The encoder can
2106       select any size equal to or less than this value by using
2107       signaling specific to the header compression format inside a
2108       header block, see [COMPRESSION].  The initial value is 4,096
2109       octets.
2110 
2111    SETTINGS_ENABLE_PUSH (0x2):  This setting can be use to disable
2112       server push (Section 8.2).  An endpoint MUST NOT send a
2113       PUSH_PROMISE frame if it receives this parameter set to a value of
2114       0.  An endpoint that has both set this parameter to 0 and had it
2115       acknowledged MUST treat the receipt of a PUSH_PROMISE frame as a
2116       connection error (Section 5.4.1) of type PROTOCOL_ERROR.
2117 
2118       The initial value is 1, which indicates that server push is
2119       permitted.  Any value other than 0 or 1 MUST be treated as a
2120       connection error (Section 5.4.1) of type PROTOCOL_ERROR.
2121 
2122    SETTINGS_MAX_CONCURRENT_STREAMS (0x3):  Indicates the maximum number
2123       of concurrent streams that the sender will allow.  This limit is
2124       directional: it applies to the number of streams that the sender
2125 
2126 
2127 
2128 Belshe, et al.           Expires August 15, 2015               [Page 38]
2129 
2130 Internet-Draft                   HTTP/2                    February 2015
2131 
2132 
2133       permits the receiver to create.  Initially there is no limit to
2134       this value.  It is recommended that this value be no smaller than
2135       100, so as to not unnecessarily limit parallelism.
2136 
2137       A value of 0 for SETTINGS_MAX_CONCURRENT_STREAMS SHOULD NOT be
2138       treated as special by endpoints.  A zero value does prevent the
2139       creation of new streams, however this can also happen for any
2140       limit that is exhausted with active streams.  Servers SHOULD only
2141       set a zero value for short durations; if a server does not wish to
2142       accept requests, closing the connection is more appropriate.
2143 
2144    SETTINGS_INITIAL_WINDOW_SIZE (0x4):  Indicates the sender's initial
2145       window size (in octets) for stream level flow control.  The
2146       initial value is 2^16-1 (65,535) octets.
2147 
2148       This setting affects the window size of all streams, see
2149       Section 6.9.2.
2150 
2151       Values above the maximum flow control window size of 2^31-1 MUST
2152       be treated as a connection error (Section 5.4.1) of type
2153       FLOW_CONTROL_ERROR.
2154 
2155    SETTINGS_MAX_FRAME_SIZE (0x5):  Indicates the size of the largest
2156       frame payload that the sender is willing to receive, in octets.
2157 
2158       The initial value is 2^14 (16,384) octets.  The value advertised
2159       by an endpoint MUST be between this initial value and the maximum
2160       allowed frame size (2^24-1 or 16,777,215 octets), inclusive.
2161       Values outside this range MUST be treated as a connection error
2162       (Section 5.4.1) of type PROTOCOL_ERROR.
2163 
2164    SETTINGS_MAX_HEADER_LIST_SIZE (0x6):  This advisory setting informs a
2165       peer of the maximum size of header list that the sender is
2166       prepared to accept, in octets.  The value is based on the
2167       uncompressed size of header fields, including the length of the
2168       name and value in octets plus an overhead of 32 octets for each
2169       header field.
2170 
2171       For any given request, a lower limit than what is advertised MAY
2172       be enforced.  The initial value of this setting is unlimited.
2173 
2174    An endpoint that receives a SETTINGS frame with any unknown or
2175    unsupported identifier MUST ignore that setting.
2176 
2177 
2178 
2179 
2180 
2181 
2182 
2183 
2184 Belshe, et al.           Expires August 15, 2015               [Page 39]
2185 
2186 Internet-Draft                   HTTP/2                    February 2015
2187 
2188 
2189 6.5.3.  Settings Synchronization
2190 
2191    Most values in SETTINGS benefit from or require an understanding of
2192    when the peer has received and applied the changed parameter values.
2193    In order to provide such synchronization timepoints, the recipient of
2194    a SETTINGS frame in which the ACK flag is not set MUST apply the
2195    updated parameters as soon as possible upon receipt.
2196 
2197    The values in the SETTINGS frame MUST be processed in the order they
2198    appear, with no other frame processing between values.  Unsupported
2199    parameters MUST be ignored.  Once all values have been processed, the
2200    recipient MUST immediately emit a SETTINGS frame with the ACK flag
2201    set.  Upon receiving a SETTINGS frame with the ACK flag set, the
2202    sender of the altered parameters can rely on the setting having been
2203    applied.
2204 
2205    If the sender of a SETTINGS frame does not receive an acknowledgement
2206    within a reasonable amount of time, it MAY issue a connection error
2207    (Section 5.4.1) of type SETTINGS_TIMEOUT.
2208 
2209 6.6.  PUSH_PROMISE
2210 
2211    The PUSH_PROMISE frame (type=0x5) is used to notify the peer endpoint
2212    in advance of streams the sender intends to initiate.  The
2213    PUSH_PROMISE frame includes the unsigned 31-bit identifier of the
2214    stream the endpoint plans to create along with a set of headers that
2215    provide additional context for the stream.  Section 8.2 contains a
2216    thorough description of the use of PUSH_PROMISE frames.
2217 
2218     +---------------+
2219     |Pad Length? (8)|
2220     +-+-------------+-----------------------------------------------+
2221     |R|                  Promised Stream ID (31)                    |
2222     +-+-----------------------------+-------------------------------+
2223     |                   Header Block Fragment (*)                 ...
2224     +---------------------------------------------------------------+
2225     |                           Padding (*)                       ...
2226     +---------------------------------------------------------------+
2227 
2228                   Figure 11: PUSH_PROMISE Payload Format
2229 
2230    The PUSH_PROMISE frame payload has the following fields:
2231 
2232    Pad Length:  An 8-bit field containing the length of the frame
2233       padding in units of octets.  This field is only present if the
2234       PADDED flag is set.
2235 
2236    R: A single reserved bit.
2237 
2238 
2239 
2240 Belshe, et al.           Expires August 15, 2015               [Page 40]
2241 
2242 Internet-Draft                   HTTP/2                    February 2015
2243 
2244 
2245    Promised Stream ID:  An unsigned 31-bit integer that identifies the
2246       stream that is reserved by the PUSH_PROMISE.  The promised stream
2247       identifier MUST be a valid choice for the next stream sent by the
2248       sender (see new stream identifier (Section 5.1.1)).
2249 
2250    Header Block Fragment:  A header block fragment (Section 4.3)
2251       containing request header fields.
2252 
2253    Padding:  Padding octets.
2254 
2255    The PUSH_PROMISE frame defines the following flags:
2256 
2257    END_HEADERS (0x4):  Bit 2 being set indicates that this frame
2258       contains an entire header block (Section 4.3) and is not followed
2259       by any CONTINUATION frames.
2260 
2261       A PUSH_PROMISE frame without the END_HEADERS flag set MUST be
2262       followed by a CONTINUATION frame for the same stream.  A receiver
2263       MUST treat the receipt of any other type of frame or a frame on a
2264       different stream as a connection error (Section 5.4.1) of type
2265       PROTOCOL_ERROR.
2266 
2267    PADDED (0x8):  Bit 3 being set indicates that the Pad Length field
2268       and any padding that it describes is present.
2269 
2270    PUSH_PROMISE frames MUST be associated with a peer-initiated stream
2271    that is in either the "open" or "half closed (remote)" state.  The
2272    stream identifier of a PUSH_PROMISE frame indicates the stream it is
2273    associated with.  If the stream identifier field specifies the value
2274    0x0, a recipient MUST respond with a connection error (Section 5.4.1)
2275    of type PROTOCOL_ERROR.
2276 
2277    Promised streams are not required to be used in the order they are
2278    promised.  The PUSH_PROMISE only reserves stream identifiers for
2279    later use.
2280 
2281    PUSH_PROMISE MUST NOT be sent if the SETTINGS_ENABLE_PUSH setting of
2282    the peer endpoint is set to 0.  An endpoint that has set this setting
2283    and has received acknowledgement MUST treat the receipt of a
2284    PUSH_PROMISE frame as a connection error (Section 5.4.1) of type
2285    PROTOCOL_ERROR.
2286 
2287    Recipients of PUSH_PROMISE frames can choose to reject promised
2288    streams by returning a RST_STREAM referencing the promised stream
2289    identifier back to the sender of the PUSH_PROMISE.
2290 
2291    A PUSH_PROMISE frame modifies the connection state in two ways.  The
2292    inclusion of a header block (Section 4.3) potentially modifies the
2293 
2294 
2295 
2296 Belshe, et al.           Expires August 15, 2015               [Page 41]
2297 
2298 Internet-Draft                   HTTP/2                    February 2015
2299 
2300 
2301    state maintained for header compression.  PUSH_PROMISE also reserves
2302    a stream for later use, causing the promised stream to enter the
2303    "reserved" state.  A sender MUST NOT send a PUSH_PROMISE on a stream
2304    unless that stream is either "open" or "half closed (remote)"; the
2305    sender MUST ensure that the promised stream is a valid choice for a
2306    new stream identifier (Section 5.1.1) (that is, the promised stream
2307    MUST be in the "idle" state).
2308 
2309    Since PUSH_PROMISE reserves a stream, ignoring a PUSH_PROMISE frame
2310    causes the stream state to become indeterminate.  A receiver MUST
2311    treat the receipt of a PUSH_PROMISE on a stream that is neither
2312    "open" nor "half closed (local)" as a connection error
2313    (Section 5.4.1) of type PROTOCOL_ERROR.  However, an endpoint that
2314    has sent RST_STREAM on the associated stream MUST handle PUSH_PROMISE
2315    frames that might have been created before the RST_STREAM frame is
2316    received and processed.
2317 
2318    A receiver MUST treat the receipt of a PUSH_PROMISE that promises an
2319    illegal stream identifier (Section 5.1.1) (that is, an identifier for
2320    a stream that is not currently in the "idle" state) as a connection
2321    error (Section 5.4.1) of type PROTOCOL_ERROR.
2322 
2323    The PUSH_PROMISE frame can include padding.  Padding fields and flags
2324    are identical to those defined for DATA frames (Section 6.1).
2325 
2326 6.7.  PING
2327 
2328    The PING frame (type=0x6) is a mechanism for measuring a minimal
2329    round trip time from the sender, as well as determining whether an
2330    idle connection is still functional.  PING frames can be sent from
2331    any endpoint.
2332 
2333     +---------------------------------------------------------------+
2334     |                                                               |
2335     |                      Opaque Data (64)                         |
2336     |                                                               |
2337     +---------------------------------------------------------------+
2338 
2339                       Figure 12: PING Payload Format
2340 
2341    In addition to the frame header, PING frames MUST contain 8 octets of
2342    data in the payload.  A sender can include any value it chooses and
2343    use those octets in any fashion.
2344 
2345    Receivers of a PING frame that does not include an ACK flag MUST send
2346    a PING frame with the ACK flag set in response, with an identical
2347    payload.  PING responses SHOULD be given higher priority than any
2348    other frame.
2349 
2350 
2351 
2352 Belshe, et al.           Expires August 15, 2015               [Page 42]
2353 
2354 Internet-Draft                   HTTP/2                    February 2015
2355 
2356 
2357    The PING frame defines the following flags:
2358 
2359    ACK (0x1):  Bit 0 being set indicates that this PING frame is a PING
2360       response.  An endpoint MUST set this flag in PING responses.  An
2361       endpoint MUST NOT respond to PING frames containing this flag.
2362 
2363    PING frames are not associated with any individual stream.  If a PING
2364    frame is received with a stream identifier field value other than
2365    0x0, the recipient MUST respond with a connection error
2366    (Section 5.4.1) of type PROTOCOL_ERROR.
2367 
2368    Receipt of a PING frame with a length field value other than 8 MUST
2369    be treated as a connection error (Section 5.4.1) of type
2370    FRAME_SIZE_ERROR.
2371 
2372 6.8.  GOAWAY
2373 
2374    The GOAWAY frame (type=0x7) informs the remote peer to stop creating
2375    streams on this connection.  GOAWAY can be sent by either the client
2376    or the server.  Once sent, the sender will ignore frames sent on any
2377    new streams with identifiers higher than the included last stream
2378    identifier.  Receivers of a GOAWAY frame MUST NOT open additional
2379    streams on the connection, although a new connection can be
2380    established for new streams.
2381 
2382    The purpose of this frame is to allow an endpoint to gracefully stop
2383    accepting new streams, while still finishing processing of previously
2384    established streams.  This enables administrative actions, like
2385    server maintenance.
2386 
2387    There is an inherent race condition between an endpoint starting new
2388    streams and the remote sending a GOAWAY frame.  To deal with this
2389    case, the GOAWAY contains the stream identifier of the last peer-
2390    initiated stream which was or might be processed on the sending
2391    endpoint in this connection.  For instance, if the server sends a
2392    GOAWAY frame, the identified stream is the highest numbered stream
2393    initiated by the client.
2394 
2395    If the receiver of the GOAWAY has sent data on streams with a higher
2396    stream identifier than what is indicated in the GOAWAY frame, those
2397    streams are not or will not be processed.  The receiver of the GOAWAY
2398    frame can treat the streams as though they had never been created at
2399    all, thereby allowing those streams to be retried later on a new
2400    connection.
2401 
2402    Endpoints SHOULD always send a GOAWAY frame before closing a
2403    connection so that the remote peer can know whether a stream has been
2404    partially processed or not.  For example, if an HTTP client sends a
2405 
2406 
2407 
2408 Belshe, et al.           Expires August 15, 2015               [Page 43]
2409 
2410 Internet-Draft                   HTTP/2                    February 2015
2411 
2412 
2413    POST at the same time that a server closes a connection, the client
2414    cannot know if the server started to process that POST request if the
2415    server does not send a GOAWAY frame to indicate what streams it might
2416    have acted on.
2417 
2418    An endpoint might choose to close a connection without sending GOAWAY
2419    for misbehaving peers.
2420 
2421     +-+-------------------------------------------------------------+
2422     |R|                  Last-Stream-ID (31)                        |
2423     +-+-------------------------------------------------------------+
2424     |                      Error Code (32)                          |
2425     +---------------------------------------------------------------+
2426     |                  Additional Debug Data (*)                    |
2427     +---------------------------------------------------------------+
2428 
2429                      Figure 13: GOAWAY Payload Format
2430 
2431    The GOAWAY frame does not define any flags.
2432 
2433    The GOAWAY frame applies to the connection, not a specific stream.
2434    An endpoint MUST treat a GOAWAY frame with a stream identifier other
2435    than 0x0 as a connection error (Section 5.4.1) of type
2436    PROTOCOL_ERROR.
2437 
2438    The last stream identifier in the GOAWAY frame contains the highest
2439    numbered stream identifier for which the sender of the GOAWAY frame
2440    might have taken some action on, or might yet take action on.  All
2441    streams up to and including the identified stream might have been
2442    processed in some way.  The last stream identifier can be set to 0 if
2443    no streams were processed.
2444 
2445    Note:  In this context, "processed" means that some data from the
2446       stream was passed to some higher layer of software that might have
2447       taken some action as a result.
2448 
2449    If a connection terminates without a GOAWAY frame, the last stream
2450    identifier is effectively the highest possible stream identifier.
2451 
2452    On streams with lower or equal numbered identifiers that were not
2453    closed completely prior to the connection being closed, re-attempting
2454    requests, transactions, or any protocol activity is not possible,
2455    with the exception of idempotent actions like HTTP GET, PUT, or
2456    DELETE.  Any protocol activity that uses higher numbered streams can
2457    be safely retried using a new connection.
2458 
2459    Activity on streams numbered lower or equal to the last stream
2460    identifier might still complete successfully.  The sender of a GOAWAY
2461 
2462 
2463 
2464 Belshe, et al.           Expires August 15, 2015               [Page 44]
2465 
2466 Internet-Draft                   HTTP/2                    February 2015
2467 
2468 
2469    frame might gracefully shut down a connection by sending a GOAWAY
2470    frame, maintaining the connection in an open state until all in-
2471    progress streams complete.
2472 
2473    An endpoint MAY send multiple GOAWAY frames if circumstances change.
2474    For instance, an endpoint that sends GOAWAY with NO_ERROR during
2475    graceful shutdown could subsequently encounter a condition that
2476    requires immediate termination of the connection.  The last stream
2477    identifier from the last GOAWAY frame received indicates which
2478    streams could have been acted upon.  Endpoints MUST NOT increase the
2479    value they send in the last stream identifier, since the peers might
2480    already have retried unprocessed requests on another connection.
2481 
2482    A client that is unable to retry requests loses all requests that are
2483    in flight when the server closes the connection.  This is especially
2484    true for intermediaries that might not be serving clients using
2485    HTTP/2.  A server that is attempting to gracefully shut down a
2486    connection SHOULD send an initial GOAWAY frame with the last stream
2487    identifier set to 2^31-1 and a NO_ERROR code.  This signals to the
2488    client that a shutdown is imminent and that no further requests can
2489    be initiated.  After waiting at least one round trip time, the server
2490    can send another GOAWAY frame with an updated last stream identifier.
2491    This ensures that a connection can be cleanly shut down without
2492    losing requests.
2493 
2494    After sending a GOAWAY frame, the sender can discard frames for
2495    streams with identifiers higher than the identified last stream.
2496    However, any frames that alter connection state cannot be completely
2497    ignored.  For instance, HEADERS, PUSH_PROMISE and CONTINUATION frames
2498    MUST be minimally processed to ensure the state maintained for header
2499    compression is consistent (see Section 4.3); similarly DATA frames
2500    MUST be counted toward the connection flow control window.  Failure
2501    to process these frames can cause flow control or header compression
2502    state to become unsynchronized.
2503 
2504    The GOAWAY frame also contains a 32-bit error code (Section 7) that
2505    contains the reason for closing the connection.
2506 
2507    Endpoints MAY append opaque data to the payload of any GOAWAY frame.
2508    Additional debug data is intended for diagnostic purposes only and
2509    carries no semantic value.  Debug information could contain security-
2510    or privacy-sensitive data.  Logged or otherwise persistently stored
2511    debug data MUST have adequate safeguards to prevent unauthorized
2512    access.
2513 
2514 
2515 
2516 
2517 
2518 
2519 
2520 Belshe, et al.           Expires August 15, 2015               [Page 45]
2521 
2522 Internet-Draft                   HTTP/2                    February 2015
2523 
2524 
2525 6.9.  WINDOW_UPDATE
2526 
2527    The WINDOW_UPDATE frame (type=0x8) is used to implement flow control;
2528    see Section 5.2 for an overview.
2529 
2530    Flow control operates at two levels: on each individual stream and on
2531    the entire connection.
2532 
2533    Both types of flow control are hop-by-hop; that is, only between the
2534    two endpoints.  Intermediaries do not forward WINDOW_UPDATE frames
2535    between dependent connections.  However, throttling of data transfer
2536    by any receiver can indirectly cause the propagation of flow control
2537    information toward the original sender.
2538 
2539    Flow control only applies to frames that are identified as being
2540    subject to flow control.  Of the frame types defined in this
2541    document, this includes only DATA frames.  Frames that are exempt
2542    from flow control MUST be accepted and processed, unless the receiver
2543    is unable to assign resources to handling the frame.  A receiver MAY
2544    respond with a stream error (Section 5.4.2) or connection error
2545    (Section 5.4.1) of type FLOW_CONTROL_ERROR if it is unable to accept
2546    a frame.
2547 
2548     +-+-------------------------------------------------------------+
2549     |R|              Window Size Increment (31)                     |
2550     +-+-------------------------------------------------------------+
2551 
2552                   Figure 14: WINDOW_UPDATE Payload Format
2553 
2554    The payload of a WINDOW_UPDATE frame is one reserved bit, plus an
2555    unsigned 31-bit integer indicating the number of octets that the
2556    sender can transmit in addition to the existing flow control window.
2557    The legal range for the increment to the flow control window is 1 to
2558    2^31-1 (2,147,483,647) octets.
2559 
2560    The WINDOW_UPDATE frame does not define any flags.
2561 
2562    The WINDOW_UPDATE frame can be specific to a stream or to the entire
2563    connection.  In the former case, the frame's stream identifier
2564    indicates the affected stream; in the latter, the value "0" indicates
2565    that the entire connection is the subject of the frame.
2566 
2567    A receiver MUST treat the receipt of a WINDOW_UPDATE frame with an
2568    flow control window increment of 0 as a stream error (Section 5.4.2)
2569    of type PROTOCOL_ERROR; errors on the connection flow control window
2570    MUST be treated as a connection error (Section 5.4.1).
2571 
2572 
2573 
2574 
2575 
2576 Belshe, et al.           Expires August 15, 2015               [Page 46]
2577 
2578 Internet-Draft                   HTTP/2                    February 2015
2579 
2580 
2581    WINDOW_UPDATE can be sent by a peer that has sent a frame bearing the
2582    END_STREAM flag.  This means that a receiver could receive a
2583    WINDOW_UPDATE frame on a "half closed (remote)" or "closed" stream.
2584    A receiver MUST NOT treat this as an error, see Section 5.1.
2585 
2586    A receiver that receives a flow controlled frame MUST always account
2587    for its contribution against the connection flow control window,
2588    unless the receiver treats this as a connection error
2589    (Section 5.4.1).  This is necessary even if the frame is in error.
2590    Since the sender counts the frame toward the flow control window, if
2591    the receiver does not, the flow control window at sender and receiver
2592    can become different.
2593 
2594    A WINDOW_UPDATE frame with a length other than 4 octets MUST be
2595    treated as a connection error (Section 5.4.1) of type
2596    FRAME_SIZE_ERROR.
2597 
2598 6.9.1.  The Flow Control Window
2599 
2600    Flow control in HTTP/2 is implemented using a window kept by each
2601    sender on every stream.  The flow control window is a simple integer
2602    value that indicates how many octets of data the sender is permitted
2603    to transmit; as such, its size is a measure of the buffering capacity
2604    of the receiver.
2605 
2606    Two flow control windows are applicable: the stream flow control
2607    window and the connection flow control window.  The sender MUST NOT
2608    send a flow controlled frame with a length that exceeds the space
2609    available in either of the flow control windows advertised by the
2610    receiver.  Frames with zero length with the END_STREAM flag set (that
2611    is, an empty DATA frame) MAY be sent if there is no available space
2612    in either flow control window.
2613 
2614    For flow control calculations, the 9 octet frame header is not
2615    counted.
2616 
2617    After sending a flow controlled frame, the sender reduces the space
2618    available in both windows by the length of the transmitted frame.
2619 
2620    The receiver of a frame sends a WINDOW_UPDATE frame as it consumes
2621    data and frees up space in flow control windows.  Separate
2622    WINDOW_UPDATE frames are sent for the stream and connection level
2623    flow control windows.
2624 
2625    A sender that receives a WINDOW_UPDATE frame updates the
2626    corresponding window by the amount specified in the frame.
2627 
2628 
2629 
2630 
2631 
2632 Belshe, et al.           Expires August 15, 2015               [Page 47]
2633 
2634 Internet-Draft                   HTTP/2                    February 2015
2635 
2636 
2637    A sender MUST NOT allow a flow control window to exceed 2^31-1
2638    octets.  If a sender receives a WINDOW_UPDATE that causes a flow
2639    control window to exceed this maximum it MUST terminate either the
2640    stream or the connection, as appropriate.  For streams, the sender
2641    sends a RST_STREAM with the error code of FLOW_CONTROL_ERROR code;
2642    for the connection, a GOAWAY frame with a FLOW_CONTROL_ERROR code.
2643 
2644    Flow controlled frames from the sender and WINDOW_UPDATE frames from
2645    the receiver are completely asynchronous with respect to each other.
2646    This property allows a receiver to aggressively update the window
2647    size kept by the sender to prevent streams from stalling.
2648 
2649 6.9.2.  Initial Flow Control Window Size
2650 
2651    When an HTTP/2 connection is first established, new streams are
2652    created with an initial flow control window size of 65,535 octets.
2653    The connection flow control window is 65,535 octets.  Both endpoints
2654    can adjust the initial window size for new streams by including a
2655    value for SETTINGS_INITIAL_WINDOW_SIZE in the SETTINGS frame that
2656    forms part of the connection preface.  The connection flow control
2657    window can only be changed using WINDOW_UPDATE frames.
2658 
2659    Prior to receiving a SETTINGS frame that sets a value for
2660    SETTINGS_INITIAL_WINDOW_SIZE, an endpoint can only use the default
2661    initial window size when sending flow controlled frames.  Similarly,
2662    the connection flow control window is set to the default initial
2663    window size until a WINDOW_UPDATE frame is received.
2664 
2665    A SETTINGS frame can alter the initial flow control window size for
2666    all streams in the "open" or "half closed (remote)" state.  When the
2667    value of SETTINGS_INITIAL_WINDOW_SIZE changes, a receiver MUST adjust
2668    the size of all stream flow control windows that it maintains by the
2669    difference between the new value and the old value.
2670 
2671    A change to SETTINGS_INITIAL_WINDOW_SIZE can cause the available
2672    space in a flow control window to become negative.  A sender MUST
2673    track the negative flow control window, and MUST NOT send new flow
2674    controlled frames until it receives WINDOW_UPDATE frames that cause
2675    the flow control window to become positive.
2676 
2677    For example, if the client sends 60KB immediately on connection
2678    establishment, and the server sets the initial window size to be
2679    16KB, the client will recalculate the available flow control window
2680    to be -44KB on receipt of the SETTINGS frame.  The client retains a
2681    negative flow control window until WINDOW_UPDATE frames restore the
2682    window to being positive, after which the client can resume sending.
2683 
2684    A SETTINGS frame cannot alter the connection flow control window.
2685 
2686 
2687 
2688 Belshe, et al.           Expires August 15, 2015               [Page 48]
2689 
2690 Internet-Draft                   HTTP/2                    February 2015
2691 
2692 
2693    An endpoint MUST treat a change to SETTINGS_INITIAL_WINDOW_SIZE that
2694    causes any flow control window to exceed the maximum size as a
2695    connection error (Section 5.4.1) of type FLOW_CONTROL_ERROR.
2696 
2697 6.9.3.  Reducing the Stream Window Size
2698 
2699    A receiver that wishes to use a smaller flow control window than the
2700    current size can send a new SETTINGS frame.  However, the receiver
2701    MUST be prepared to receive data that exceeds this window size, since
2702    the sender might send data that exceeds the lower limit prior to
2703    processing the SETTINGS frame.
2704 
2705    After sending a SETTINGS frame that reduces the initial flow control
2706    window size, a receiver MAY continue to process streams that exceed
2707    flow control limits.  Allowing streams to continue does not allow the
2708    receiver to immediately reduce the space it reserves for flow control
2709    windows.  Progress on these streams can also stall, since
2710    WINDOW_UPDATE frames are needed to allow the sender to resume
2711    sending.  The receiver MAY instead send a RST_STREAM with
2712    FLOW_CONTROL_ERROR error code for the affected streams.
2713 
2714 6.10.  CONTINUATION
2715 
2716    The CONTINUATION frame (type=0x9) is used to continue a sequence of
2717    header block fragments (Section 4.3).  Any number of CONTINUATION
2718    frames can be sent, as long as the preceding frame is on the same
2719    stream and is a HEADERS, PUSH_PROMISE or CONTINUATION frame without
2720    the END_HEADERS flag set.
2721 
2722     +---------------------------------------------------------------+
2723     |                   Header Block Fragment (*)                 ...
2724     +---------------------------------------------------------------+
2725 
2726                    Figure 15: CONTINUATION Frame Payload
2727 
2728    The CONTINUATION frame payload contains a header block fragment
2729    (Section 4.3).
2730 
2731    The CONTINUATION frame defines the following flag:
2732 
2733    END_HEADERS (0x4):  Bit 2 being set indicates that this frame ends a
2734       header block (Section 4.3).
2735 
2736       If the END_HEADERS bit is not set, this frame MUST be followed by
2737       another CONTINUATION frame.  A receiver MUST treat the receipt of
2738       any other type of frame or a frame on a different stream as a
2739       connection error (Section 5.4.1) of type PROTOCOL_ERROR.
2740 
2741 
2742 
2743 
2744 Belshe, et al.           Expires August 15, 2015               [Page 49]
2745 
2746 Internet-Draft                   HTTP/2                    February 2015
2747 
2748 
2749    The CONTINUATION frame changes the connection state as defined in
2750    Section 4.3.
2751 
2752    CONTINUATION frames MUST be associated with a stream.  If a
2753    CONTINUATION frame is received whose stream identifier field is 0x0,
2754    the recipient MUST respond with a connection error (Section 5.4.1) of
2755    type PROTOCOL_ERROR.
2756 
2757    A CONTINUATION frame MUST be preceded by a HEADERS, PUSH_PROMISE or
2758    CONTINUATION frame without the END_HEADERS flag set.  A recipient
2759    that observes violation of this rule MUST respond with a connection
2760    error (Section 5.4.1) of type PROTOCOL_ERROR.
2761 
2762 7.  Error Codes
2763 
2764    Error codes are 32-bit fields that are used in RST_STREAM and GOAWAY
2765    frames to convey the reasons for the stream or connection error.
2766 
2767    Error codes share a common code space.  Some error codes apply only
2768    to either streams or the entire connection and have no defined
2769    semantics in the other context.
2770 
2771    The following error codes are defined:
2772 
2773    NO_ERROR (0x0):  The associated condition is not as a result of an
2774       error.  For example, a GOAWAY might include this code to indicate
2775       graceful shutdown of a connection.
2776 
2777    PROTOCOL_ERROR (0x1):  The endpoint detected an unspecific protocol
2778       error.  This error is for use when a more specific error code is
2779       not available.
2780 
2781    INTERNAL_ERROR (0x2):  The endpoint encountered an unexpected
2782       internal error.
2783 
2784    FLOW_CONTROL_ERROR (0x3):  The endpoint detected that its peer
2785       violated the flow control protocol.
2786 
2787    SETTINGS_TIMEOUT (0x4):  The endpoint sent a SETTINGS frame, but did
2788       not receive a response in a timely manner.  See Settings
2789       Synchronization (Section 6.5.3).
2790 
2791    STREAM_CLOSED (0x5):  The endpoint received a frame after a stream
2792       was half closed.
2793 
2794    FRAME_SIZE_ERROR (0x6):  The endpoint received a frame with an
2795       invalid size.
2796 
2797 
2798 
2799 
2800 Belshe, et al.           Expires August 15, 2015               [Page 50]
2801 
2802 Internet-Draft                   HTTP/2                    February 2015
2803 
2804 
2805    REFUSED_STREAM (0x7):  The endpoint refuses the stream prior to
2806       performing any application processing, see Section 8.1.4 for
2807       details.
2808 
2809    CANCEL (0x8):  Used by the endpoint to indicate that the stream is no
2810       longer needed.
2811 
2812    COMPRESSION_ERROR (0x9):  The endpoint is unable to maintain the
2813       header compression context for the connection.
2814 
2815    CONNECT_ERROR (0xa):  The connection established in response to a
2816       CONNECT request (Section 8.3) was reset or abnormally closed.
2817 
2818    ENHANCE_YOUR_CALM (0xb):  The endpoint detected that its peer is
2819       exhibiting a behavior that might be generating excessive load.
2820 
2821    INADEQUATE_SECURITY (0xc):  The underlying transport has properties
2822       that do not meet minimum security requirements (see Section 9.2).
2823 
2824    HTTP_1_1_REQUIRED (0xd):  The endpoint requires that HTTP/1.1 be used
2825       instead of HTTP/2.
2826 
2827    Unknown or unsupported error codes MUST NOT trigger any special
2828    behavior.  These MAY be treated by an implementation as being
2829    equivalent to INTERNAL_ERROR.
2830 
2831 8.  HTTP Message Exchanges
2832 
2833    HTTP/2 is intended to be as compatible as possible with current uses
2834    of HTTP.  This means that, from the application perspective, the
2835    features of the protocol are largely unchanged.  To achieve this, all
2836    request and response semantics are preserved, although the syntax of
2837    conveying those semantics has changed.
2838 
2839    Thus, the specification and requirements of HTTP/1.1 Semantics and
2840    Content [RFC7231], Conditional Requests [RFC7232], Range Requests
2841    [RFC7233], Caching [RFC7234] and Authentication [RFC7235] are
2842    applicable to HTTP/2.  Selected portions of HTTP/1.1 Message Syntax
2843    and Routing [RFC7230], such as the HTTP and HTTPS URI schemes, are
2844    also applicable in HTTP/2, but the expression of those semantics for
2845    this protocol are defined in the sections below.
2846 
2847 8.1.  HTTP Request/Response Exchange
2848 
2849    A client sends an HTTP request on a new stream, using a previously
2850    unused stream identifier (Section 5.1.1).  A server sends an HTTP
2851    response on the same stream as the request.
2852 
2853 
2854 
2855 
2856 Belshe, et al.           Expires August 15, 2015               [Page 51]
2857 
2858 Internet-Draft                   HTTP/2                    February 2015
2859 
2860 
2861    An HTTP message (request or response) consists of:
2862 
2863    1.  for a response only, zero or more HEADERS frames (each followed
2864        by zero or more CONTINUATION frames) containing the message
2865        headers of informational (1xx) HTTP responses (see [RFC7230],
2866        Section 3.2 and [RFC7231], Section 6.2), and
2867 
2868    2.  one HEADERS frame (followed by zero or more CONTINUATION frames)
2869        containing the message headers (see [RFC7230], Section 3.2), and
2870 
2871    3.  zero or more DATA frames containing the payload body (see
2872        [RFC7230], Section 3.3), and
2873 
2874    4.  optionally, one HEADERS frame, followed by zero or more
2875        CONTINUATION frames containing the trailer-part, if present (see
2876        [RFC7230], Section 4.1.2).
2877 
2878    The last frame in the sequence bears an END_STREAM flag, noting that
2879    a HEADERS frame bearing the END_STREAM flag can be followed by
2880    CONTINUATION frames that carry any remaining portions of the header
2881    block.
2882 
2883    Other frames (from any stream) MUST NOT occur between either HEADERS
2884    frame and any CONTINUATION frames that might follow.
2885 
2886    HTTP/2 uses DATA frames to carry message payloads.  The "chunked"
2887    transfer encoding defined in Section 4.1 of [RFC7230] MUST NOT be
2888    used in HTTP/2.
2889 
2890    Trailing header fields are carried in a header block that also
2891    terminates the stream.  Such a header block is a sequence starting
2892    with a HEADERS frame, followed by zero or more CONTINUATION frames,
2893    where the HEADERS frame bears an END_STREAM flag.  Header blocks
2894    after the first that do not terminate the stream are not part of an
2895    HTTP request or response.
2896 
2897    A HEADERS frame (and associated CONTINUATION frames) can only appear
2898    at the start or end of a stream.  An endpoint that receives a HEADERS
2899    frame without the END_STREAM flag set after receiving a final (non-
2900    informational) status code MUST treat the corresponding request or
2901    response as malformed (Section 8.1.2.6).
2902 
2903    An HTTP request/response exchange fully consumes a single stream.  A
2904    request starts with the HEADERS frame that puts the stream into an
2905    "open" state.  The request ends with a frame bearing END_STREAM,
2906    which causes the stream to become "half closed (local)" for the
2907    client and "half closed (remote)" for the server.  A response starts
2908 
2909 
2910 
2911 
2912 Belshe, et al.           Expires August 15, 2015               [Page 52]
2913 
2914 Internet-Draft                   HTTP/2                    February 2015
2915 
2916 
2917    with a HEADERS frame and ends with a frame bearing END_STREAM, which
2918    places the stream in the "closed" state.
2919 
2920    An HTTP response is complete after the server sends - or the client
2921    receives - a frame with the END_STREAM flag set (including any
2922    CONTINUATION frames needed to complete a header block).  A server can
2923    send a complete response prior to the client sending an entire
2924    request if the response does not depend on any portion of the request
2925    that has not been sent and received.  When this is true, a server MAY
2926    request that the client abort transmission of a request without error
2927    by sending a RST_STREAM with an error code of NO_ERROR after sending
2928    a complete response (i.e., a frame with the END_STREAM flag).
2929    Clients MUST NOT discard responses as a result of receiving such a
2930    RST_STREAM, though clients can always discard responses at their
2931    discretion for other reasons.
2932 
2933 8.1.1.  Upgrading From HTTP/2
2934 
2935    HTTP/2 removes support for the 101 (Switching Protocols)
2936    informational status code ([RFC7231], Section 6.2.2).
2937 
2938    The semantics of 101 (Switching Protocols) aren't applicable to a
2939    multiplexed protocol.  Alternative protocols are able to use the same
2940    mechanisms that HTTP/2 uses to negotiate their use (see Section 3).
2941 
2942 8.1.2.  HTTP Header Fields
2943 
2944    HTTP header fields carry information as a series of key-value pairs.
2945    For a listing of registered HTTP headers, see the Message Header
2946    Field Registry maintained at [4].
2947 
2948    Just as in HTTP/1.x, header field names are strings of ASCII
2949    characters that are compared in a case-insensitive fashion.  However,
2950    header field names MUST be converted to lowercase prior to their
2951    encoding in HTTP/2.  A request or response containing uppercase
2952    header field names MUST be treated as malformed (Section 8.1.2.6).
2953 
2954 8.1.2.1.  Pseudo-Header Fields
2955 
2956    While HTTP/1.x used the message start-line (see [RFC7230],
2957    Section 3.1) to convey the target URI and method of the request, and
2958    the status code for the response, HTTP/2 uses special pseudo-header
2959    fields beginning with ':' character (ASCII 0x3a) for this purpose.
2960 
2961    Pseudo-header fields are not HTTP header fields.  Endpoints MUST NOT
2962    generate pseudo-header fields other than those defined in this
2963    document.
2964 
2965 
2966 
2967 
2968 Belshe, et al.           Expires August 15, 2015               [Page 53]
2969 
2970 Internet-Draft                   HTTP/2                    February 2015
2971 
2972 
2973    Pseudo-header fields are only valid in the context in which they are
2974    defined.  Pseudo-header fields defined for requests MUST NOT appear
2975    in responses; pseudo-header fields defined for responses MUST NOT
2976    appear in requests.  Pseudo-header fields MUST NOT appear in
2977    trailers.  Endpoints MUST treat a request or response that contains
2978    undefined or invalid pseudo-header fields as malformed
2979    (Section 8.1.2.6).
2980 
2981    All pseudo-header fields MUST appear in the header block before
2982    regular header fields.  Any request or response that contains a
2983    pseudo-header field that appears in a header block after a regular
2984    header field MUST be treated as malformed (Section 8.1.2.6).
2985 
2986 8.1.2.2.  Connection-Specific Header Fields
2987 
2988    HTTP/2 does not use the "Connection" header field to indicate
2989    connection-specific header fields; in this protocol, connection-
2990    specific metadata is conveyed by other means.  An endpoint MUST NOT
2991    generate an HTTP/2 message containing connection-specific header
2992    fields; any message containing connection-specific header fields MUST
2993    be treated as malformed (Section 8.1.2.6).
2994 
2995    The only exception to this is the TE header field, which MAY be
2996    present in an HTTP/2 request; when it is, it MUST NOT contain any
2997    value other than "trailers".
2998 
2999    This means that an intermediary transforming an HTTP/1.x message to
3000    HTTP/2 will need to remove any header fields nominated by the
3001    Connection header field, along with the Connection header field
3002    itself.  Such intermediaries SHOULD also remove other connection-
3003    specific header fields, such as Keep-Alive, Proxy-Connection,
3004    Transfer-Encoding and Upgrade, even if they are not nominated by
3005    Connection.
3006 
3007    Note:  HTTP/2 purposefully does not support upgrade to another
3008       protocol.  The handshake methods described in Section 3 are
3009       believed sufficient to negotiate the use of alternative protocols.
3010 
3011 8.1.2.3.  Request Pseudo-Header Fields
3012 
3013    The following pseudo-header fields are defined for HTTP/2 requests:
3014 
3015    o  The ":method" pseudo-header field includes the HTTP method
3016       ([RFC7231], Section 4).
3017 
3018    o  The ":scheme" pseudo-header field includes the scheme portion of
3019       the target URI ([RFC3986], Section 3.1).
3020 
3021 
3022 
3023 
3024 Belshe, et al.           Expires August 15, 2015               [Page 54]
3025 
3026 Internet-Draft                   HTTP/2                    February 2015
3027 
3028 
3029       ":scheme" is not restricted to "http" and "https" schemed URIs.  A
3030       proxy or gateway can translate requests for non-HTTP schemes,
3031       enabling the use of HTTP to interact with non-HTTP services.
3032 
3033    o  The ":authority" pseudo-header field includes the authority
3034       portion of the target URI ([RFC3986], Section 3.2).  The authority
3035       MUST NOT include the deprecated "userinfo" subcomponent for "http"
3036      or "https" schemed URIs. 
3037 
3038       To ensure that the HTTP/1.1 request line can be reproduced
3039       accurately, this pseudo-header field MUST be omitted when
3040       translating from an HTTP/1.1 request that has a request target in
3041       origin or asterisk form (see [RFC7230], Section 5.3).  Clients
3042       that generate HTTP/2 requests directly SHOULD use the ":authority"
3043       pseudo-header field instead of the "Host" header field.  An
3044       intermediary that converts an HTTP/2 request to HTTP/1.1 MUST
3045       create a "Host" header field if one is not present in a request by
3046       copying the value of the ":authority" pseudo-header field.
3047 
3048    o  The ":path" pseudo-header field includes the path and query parts
3049       of the target URI (the "path-absolute" production from [RFC3986]
3050       and optionally a '?' character followed by the "query" production,
3051       see [RFC3986], Section 3.3 and [RFC3986], Section 3.4).  A request
3052       in asterisk form includes the value '*' for the ":path" pseudo-
3053       header field.
3054 
3055       This pseudo-header field MUST NOT be empty for "http" or "https"
3056       URIs; "http" or "https" URIs that do not contain a path component
3057       MUST include a value of '/'.  The exception to this rule is an
3058       OPTIONS request for an "http" or "https" URI that does not include
3059       a path component; these MUST include a ":path" pseudo-header field
3060       with a value of '*' (see [RFC7230], Section 5.3.4).
3061 
3062    All HTTP/2 requests MUST include exactly one valid value for the
3063    ":method", ":scheme", and ":path" pseudo-header fields, unless it is
3064    a CONNECT request (Section 8.3).  An HTTP request that omits
3065    mandatory pseudo-header fields is malformed (Section 8.1.2.6).
3066 
3067    HTTP/2 does not define a way to carry the version identifier that is
3068    included in the HTTP/1.1 request line.
3069 
3070 8.1.2.4.  Response Pseudo-Header Fields
3071 
3072    For HTTP/2 responses, a single ":status" pseudo-header field is
3073    defined that carries the HTTP status code field (see [RFC7231],
3074    Section 6).  This pseudo-header field MUST be included in all
3075    responses, otherwise the response is malformed (Section 8.1.2.6).
3076 
3077 
3078 
3079 
3080 Belshe, et al.           Expires August 15, 2015               [Page 55]
3081 
3082 Internet-Draft                   HTTP/2                    February 2015
3083 
3084 
3085    HTTP/2 does not define a way to carry the version or reason phrase
3086    that is included in an HTTP/1.1 status line.
3087 
3088 8.1.2.5.  Compressing the Cookie Header Field
3089 
3090    The Cookie header field [COOKIE] uses a semi-colon (";") to delimit
3091    cookie-pairs (or "crumbs").  This header field doesn't follow the
3092    list construction rules in HTTP (see [RFC7230], Section 3.2.2), which
3093    prevents cookie-pairs from being separated into different name-value
3094    pairs.  This can significantly reduce compression efficiency as
3095    individual cookie-pairs are updated.
3096 
3097    To allow for better compression efficiency, the Cookie header field
3098    MAY be split into separate header fields, each with one or more
3099    cookie-pairs.  If there are multiple Cookie header fields after
3100    decompression, these MUST be concatenated into a single octet string
3101    using the two octet delimiter of 0x3B, 0x20 (the ASCII string "; ")
3102    before being passed into a non-HTTP/2 context, such as an HTTP/1.1
3103    connection, or a generic HTTP server application.
3104 
3105    Therefore, the following two lists of Cookie header fields are
3106    semantically equivalent.
3107 
3108      cookie: a=b; c=d; e=f
3109 
3110      cookie: a=b
3111      cookie: c=d
3112      cookie: e=f
3113 
3114 8.1.2.6.  Malformed Requests and Responses
3115 
3116    A malformed request or response is one that is an otherwise valid
3117    sequence of HTTP/2 frames, but is otherwise invalid due to the
3118    presence of extraneous frames, prohibited header fields, the absence
3119    of mandatory header fields, or the inclusion of uppercase header
3120    field names.
3121 
3122    A request or response that includes an payload body can include a
3123    "content-length" header field.  A request or response is also
3124    malformed if the value of a "content-length" header field does not
3125    equal the sum of the DATA frame payload lengths that form the body.
3126    A response that is defined to have no payload, as described in
3127    [RFC7230], Section 3.3.2, can have a non-zero "content-length" header
3128    field, even though no content is included in DATA frames.
3129 
3130    Intermediaries that process HTTP requests or responses (i.e., any
3131    intermediary not acting as a tunnel) MUST NOT forward a malformed
3132    request or response.  Malformed requests or responses that are
3133 
3134 
3135 
3136 Belshe, et al.           Expires August 15, 2015               [Page 56]
3137 
3138 Internet-Draft                   HTTP/2                    February 2015
3139 
3140 
3141    detected MUST be treated as a stream error (Section 5.4.2) of type
3142    PROTOCOL_ERROR.
3143 
3144    For malformed requests, a server MAY send an HTTP response prior to
3145    closing or resetting the stream.  Clients MUST NOT accept a malformed
3146    response.  Note that these requirements are intended to protect
3147    against several types of common attacks against HTTP; they are
3148    deliberately strict, because being permissive can expose
3149    implementations to these vulnerabilities.
3150 
3151 8.1.3.  Examples
3152 
3153    This section shows HTTP/1.1 requests and responses, with
3154    illustrations of equivalent HTTP/2 requests and responses.
3155 
3156    An HTTP GET request includes request header fields and no payload
3157    body and is therefore transmitted as a single HEADERS frame, followed
3158    by zero or more CONTINUATION frames containing the serialized block
3159    of request header fields.  The HEADERS frame in the following has
3160    both the END_HEADERS and END_STREAM flags set; no CONTINUATION frames
3161    are sent:
3162 
3163      GET /resource HTTP/1.1           HEADERS
3164      Host: example.org          ==>     + END_STREAM
3165      Accept: image/jpeg                 + END_HEADERS
3166                                           :method = GET
3167                                           :scheme = https
3168                                           :path = /resource
3169                                           host = example.org
3170                                           accept = image/jpeg
3171 
3172    Similarly, a response that includes only response header fields is
3173    transmitted as a HEADERS frame (again, followed by zero or more
3174    CONTINUATION frames) containing the serialized block of response
3175    header fields.
3176 
3177      HTTP/1.1 304 Not Modified        HEADERS
3178      ETag: "xyzzy"              ==>     + END_STREAM
3179      Expires: Thu, 23 Jan ...           + END_HEADERS
3180                                           :status = 304
3181                                           etag = "xyzzy"
3182                                           expires = Thu, 23 Jan ...
3183 
3184    An HTTP POST request that includes request header fields and payload
3185    data is transmitted as one HEADERS frame, followed by zero or more
3186    CONTINUATION frames containing the request header fields, followed by
3187    one or more DATA frames, with the last CONTINUATION (or HEADERS)
3188 
3189 
3190 
3191 
3192 Belshe, et al.           Expires August 15, 2015               [Page 57]
3193 
3194 Internet-Draft                   HTTP/2                    February 2015
3195 
3196 
3197    frame having the END_HEADERS flag set and the final DATA frame having
3198    the END_STREAM flag set:
3199 
3200      POST /resource HTTP/1.1          HEADERS
3201      Host: example.org          ==>     - END_STREAM
3202      Content-Type: image/jpeg           - END_HEADERS
3203      Content-Length: 123                  :method = POST
3204                                           :path = /resource
3205      {binary data}                        :scheme = https
3206 
3207                                       CONTINUATION
3208                                         + END_HEADERS
3209                                           content-type = image/jpeg
3210                                           host = example.org
3211                                           content-length = 123
3212 
3213                                       DATA
3214                                         + END_STREAM
3215                                       {binary data}
3216 
3217    Note that data contributing to any given header field could be spread
3218    between header block fragments.  The allocation of header fields to
3219    frames in this example is illustrative only.
3220 
3221    A response that includes header fields and payload data is
3222    transmitted as a HEADERS frame, followed by zero or more CONTINUATION
3223    frames, followed by one or more DATA frames, with the last DATA frame
3224    in the sequence having the END_STREAM flag set:
3225 
3226      HTTP/1.1 200 OK                  HEADERS
3227      Content-Type: image/jpeg   ==>     - END_STREAM
3228      Content-Length: 123                + END_HEADERS
3229                                           :status = 200
3230      {binary data}                        content-type = image/jpeg
3231                                           content-length = 123
3232 
3233                                       DATA
3234                                         + END_STREAM
3235                                       {binary data}
3236 
3237    An informational response using a 1xx status code other than 101 is
3238    transmitted as a HEADERS frame, followed by zero or more CONTINUATION
3239    frames.
3240 
3241    Trailing header fields are sent as a header block after both the
3242    request or response header block and all the DATA frames have been
3243    sent.  The HEADERS frame starting the trailers header block has the
3244    END_STREAM flag set.
3245 
3246 
3247 
3248 Belshe, et al.           Expires August 15, 2015               [Page 58]
3249 
3250 Internet-Draft                   HTTP/2                    February 2015
3251 
3252 
3253    The following example includes both a 100 (Continue) status code,
3254    which is sent in response to a request containing a "100-continue"
3255    token in the Expect header field, and trailing header fields:
3256 
3257      HTTP/1.1 100 Continue            HEADERS
3258      Extension-Field: bar       ==>     - END_STREAM
3259                                         + END_HEADERS
3260                                           :status = 100
3261                                           extension-field = bar
3262 
3263      HTTP/1.1 200 OK                  HEADERS
3264      Content-Type: image/jpeg   ==>     - END_STREAM
3265      Transfer-Encoding: chunked         + END_HEADERS
3266      Trailer: Foo                         :status = 200
3267                                           content-length = 123
3268      123                                  content-type = image/jpeg
3269      {binary data}                        trailer = Foo
3270      0
3271      Foo: bar                         DATA
3272                                         - END_STREAM
3273                                       {binary data}
3274 
3275                                       HEADERS
3276                                         + END_STREAM
3277                                         + END_HEADERS
3278                                           foo = bar
3279 
3280 8.1.4.  Request Reliability Mechanisms in HTTP/2
3281 
3282    In HTTP/1.1, an HTTP client is unable to retry a non-idempotent
3283    request when an error occurs, because there is no means to determine
3284    the nature of the error.  It is possible that some server processing
3285    occurred prior to the error, which could result in undesirable
3286    effects if the request were reattempted.
3287 
3288    HTTP/2 provides two mechanisms for providing a guarantee to a client
3289    that a request has not been processed:
3290 
3291    o  The GOAWAY frame indicates the highest stream number that might
3292       have been processed.  Requests on streams with higher numbers are
3293       therefore guaranteed to be safe to retry.
3294 
3295    o  The REFUSED_STREAM error code can be included in a RST_STREAM
3296       frame to indicate that the stream is being closed prior to any
3297       processing having occurred.  Any request that was sent on the
3298       reset stream can be safely retried.
3299 
3300 
3301 
3302 
3303 
3304 Belshe, et al.           Expires August 15, 2015               [Page 59]
3305 
3306 Internet-Draft                   HTTP/2                    February 2015
3307 
3308 
3309    Requests that have not been processed have not failed; clients MAY
3310    automatically retry them, even those with non-idempotent methods.
3311 
3312    A server MUST NOT indicate that a stream has not been processed
3313    unless it can guarantee that fact.  If frames that are on a stream
3314    are passed to the application layer for any stream, then
3315    REFUSED_STREAM MUST NOT be used for that stream, and a GOAWAY frame
3316    MUST include a stream identifier that is greater than or equal to the
3317    given stream identifier.
3318 
3319    In addition to these mechanisms, the PING frame provides a way for a
3320    client to easily test a connection.  Connections that remain idle can
3321    become broken as some middleboxes (for instance, network address
3322    translators, or load balancers) silently discard connection bindings.
3323    The PING frame allows a client to safely test whether a connection is
3324    still active without sending a request.
3325 
3326 8.2.  Server Push
3327 
3328    HTTP/2 allows a server to pre-emptively send (or "push") responses
3329    (along with corresponding "promised" requests) to a client in
3330    association with a previous client-initiated request.  This can be
3331    useful when the server knows the client will need to have those
3332    responses available in order to fully process the response to the
3333    original request.
3334 
3335    A client can request that server push be disabled, though this is
3336    negotiated for each hop independently.  The SETTINGS_ENABLE_PUSH
3337    setting can be set to 0 to indicate that server push is disabled.
3338 
3339    Promised requests MUST be cacheable (see [RFC7231], Section 4.2.3),
3340    MUST be safe (see [RFC7231], Section 4.2.1) and MUST NOT include a
3341    request body.  Clients that receive a promised request that is not
3342    cacheable, is not known to be safe or that indicates the presence of
3343    a request body MUST reset the promised stream with a stream error
3344    (Section 5.4.2) of type PROTOCOL_ERROR.  Note this could result in
3345    the promised stream being reset if the client does not recognize a
3346    newly defined method as being safe.
3347 
3348    Pushed responses that are cacheable (see [RFC7234], Section 3) can be
3349    stored by the client, if it implements an HTTP cache.  Pushed
3350    responses are considered successfully validated on the origin server
3351    (e.g., if the "no-cache" cache response directive [RFC7234],
3352    Section 5.2.2 is present) while the stream identified by the promised
3353    stream ID is still open.
3354 
3355 
3356 
3357 
3358 
3359 
3360 Belshe, et al.           Expires August 15, 2015               [Page 60]
3361 
3362 Internet-Draft                   HTTP/2                    February 2015
3363 
3364 
3365    Pushed responses that are not cacheable MUST NOT be stored by any
3366    HTTP cache.  They MAY be made available to the application
3367    separately.
3368 
3369    The server MUST include a value in the ":authority" header field for
3370    which the server is authoritative (see Section 10.1).  A client MUST
3371    treat a PUSH_PROMISE for which the server is not authoritative as a
3372    stream error (Section 5.4.2) of type PROTOCOL_ERROR.
3373 
3374    An intermediary can receive pushes from the server and choose not to
3375    forward them on to the client.  In other words, how to make use of
3376    the pushed information is up to that intermediary.  Equally, the
3377    intermediary might choose to make additional pushes to the client,
3378    without any action taken by the server.
3379 
3380    A client cannot push.  Thus, servers MUST treat the receipt of a
3381    PUSH_PROMISE frame as a connection error (Section 5.4.1) of type
3382    PROTOCOL_ERROR.  Clients MUST reject any attempt to change the
3383    SETTINGS_ENABLE_PUSH setting to a value other than 0 by treating the
3384    message as a connection error (Section 5.4.1) of type PROTOCOL_ERROR.
3385 
3386 8.2.1.  Push Requests
3387 
3388    Server push is semantically equivalent to a server responding to a
3389    request; however, in this case that request is also sent by the
3390    server, as a PUSH_PROMISE frame.
3391 
3392    The PUSH_PROMISE frame includes a header block that contains a
3393    complete set of request header fields that the server attributes to
3394    the request.  It is not possible to push a response to a request that
3395    includes a request body.
3396 
3397    Pushed responses are always associated with an explicit request from
3398    the client.  The PUSH_PROMISE frames sent by the server are sent on
3399    that explicit request's stream.  The PUSH_PROMISE frame also includes
3400    a promised stream identifier, chosen from the stream identifiers
3401    available to the server (see Section 5.1.1).
3402 
3403    The header fields in PUSH_PROMISE and any subsequent CONTINUATION
3404    frames MUST be a valid and complete set of request header fields
3405    (Section 8.1.2.3).  The server MUST include a method in the ":method"
3406    header field that is safe and cacheable.  If a client receives a
3407    PUSH_PROMISE that does not include a complete and valid set of header
3408    fields, or the ":method" header field identifies a method that is not
3409    safe, it MUST respond with a stream error (Section 5.4.2) of type
3410    PROTOCOL_ERROR.
3411 
3412 
3413 
3414 
3415 
3416 Belshe, et al.           Expires August 15, 2015               [Page 61]
3417 
3418 Internet-Draft                   HTTP/2                    February 2015
3419 
3420 
3421    The server SHOULD send PUSH_PROMISE (Section 6.6) frames prior to
3422    sending any frames that reference the promised responses.  This
3423    avoids a race where clients issue requests prior to receiving any
3424    PUSH_PROMISE frames.
3425 
3426    For example, if the server receives a request for a document
3427    containing embedded links to multiple image files, and the server
3428    chooses to push those additional images to the client, sending push
3429    promises before the DATA frames that contain the image links ensures
3430    that the client is able to see the promises before discovering
3431    embedded links.  Similarly, if the server pushes responses referenced
3432    by the header block (for instance, in Link header fields), sending
3433    the push promises before sending the header block ensures that
3434    clients do not request them.
3435 
3436    PUSH_PROMISE frames MUST NOT be sent by the client.
3437 
3438    PUSH_PROMISE frames can be sent by the server in response to any
3439    client-initiated stream, but the stream MUST be in either the "open"
3440    or "half closed (remote)" state with respect to the server.
3441    PUSH_PROMISE frames are interspersed with the frames that comprise a
3442    response, though they cannot be interspersed with HEADERS and
3443    CONTINUATION frames that comprise a single header block.
3444 
3445    Sending a PUSH_PROMISE frame creates a new stream and puts the stream
3446    into the "reserved (local)" state for the server and the "reserved
3447    (remote)" state for the client.
3448 
3449 8.2.2.  Push Responses
3450 
3451    After sending the PUSH_PROMISE frame, the server can begin delivering
3452    the pushed response as a response (Section 8.1.2.4) on a server-
3453    initiated stream that uses the promised stream identifier.  The
3454    server uses this stream to transmit an HTTP response, using the same
3455    sequence of frames as defined in Section 8.1.  This stream becomes
3456    "half closed" to the client (Section 5.1) after the initial HEADERS
3457    frame is sent.
3458 
3459    Once a client receives a PUSH_PROMISE frame and chooses to accept the
3460    pushed response, the client SHOULD NOT issue any requests for the
3461    promised response until after the promised stream has closed.
3462 
3463    If the client determines, for any reason, that it does not wish to
3464    receive the pushed response from the server, or if the server takes
3465    too long to begin sending the promised response, the client can send
3466    an RST_STREAM frame, using either the CANCEL or REFUSED_STREAM codes,
3467    and referencing the pushed stream's identifier.
3468 
3469 
3470 
3471 
3472 Belshe, et al.           Expires August 15, 2015               [Page 62]
3473 
3474 Internet-Draft                   HTTP/2                    February 2015
3475 
3476 
3477    A client can use the SETTINGS_MAX_CONCURRENT_STREAMS setting to limit
3478    the number of responses that can be concurrently pushed by a server.
3479    Advertising a SETTINGS_MAX_CONCURRENT_STREAMS value of zero disables
3480    server push by preventing the server from creating the necessary
3481    streams.  This does not prohibit a server from sending PUSH_PROMISE
3482    frames; clients need to reset any promised streams that are not
3483    wanted.
3484 
3485    Clients receiving a pushed response MUST validate that either the
3486    server is authoritative (see Section 10.1), or the proxy that
3487    provided the pushed response is configured for the corresponding
3488    request.  For example, a server that offers a certificate for only
3489    the "example.com" DNS-ID or Common Name is not permitted to push a
3490    response for "https://www.example.org/doc".
3491 
3492    The response for a PUSH_PROMISE stream begins with a HEADERS frame,
3493    which immediately puts the stream into the "half closed (remote)"
3494    state for the server and "half closed (local)" state for the client,
3495    and ends with a frame bearing END_STREAM, which places the stream in
3496    the "closed" state.
3497 
3498    Note:  The client never sends a frame with the END_STREAM flag for a
3499       server push.
3500 
3501 8.3.  The CONNECT Method
3502 
3503    In HTTP/1.x, the pseudo-method CONNECT ([RFC7231], Section 4.3.6) is
3504    used to convert an HTTP connection into a tunnel to a remote host.
3505    CONNECT is primarily used with HTTP proxies to establish a TLS
3506    session with an origin server for the purposes of interacting with
3507    "https" resources.
3508 
3509    In HTTP/2, the CONNECT method is used to establish a tunnel over a
3510    single HTTP/2 stream to a remote host, for similar purposes.  The
3511    HTTP header field mapping works as defined in Request Header Fields
3512    (Section 8.1.2.3), with a few differences.  Specifically:
3513 
3514    o  The ":method" header field is set to "CONNECT".
3515 
3516    o  The ":scheme" and ":path" header fields MUST be omitted.
3517 
3518    o  The ":authority" header field contains the host and port to
3519       connect to (equivalent to the authority-form of the request-target
3520       of CONNECT requests, see [RFC7230], Section 5.3).
3521 
3522    A CONNECT request that does not conform to these restrictions is
3523    malformed (Section 8.1.2.6).
3524 
3525 
3526 
3527 
3528 Belshe, et al.           Expires August 15, 2015               [Page 63]
3529 
3530 Internet-Draft                   HTTP/2                    February 2015
3531 
3532 
3533    A proxy that supports CONNECT establishes a TCP connection [TCP] to
3534    the server identified in the ":authority" header field.  Once this
3535    connection is successfully established, the proxy sends a HEADERS
3536    frame containing a 2xx series status code to the client, as defined
3537    in [RFC7231], Section 4.3.6.
3538 
3539    After the initial HEADERS frame sent by each peer, all subsequent
3540    DATA frames correspond to data sent on the TCP connection.  The
3541    payload of any DATA frames sent by the client is transmitted by the
3542    proxy to the TCP server; data received from the TCP server is
3543    assembled into DATA frames by the proxy.  Frame types other than DATA
3544    or stream management frames (RST_STREAM, WINDOW_UPDATE, and PRIORITY)
3545    MUST NOT be sent on a connected stream, and MUST be treated as a
3546    stream error (Section 5.4.2) if received.
3547 
3548    The TCP connection can be closed by either peer.  The END_STREAM flag
3549    on a DATA frame is treated as being equivalent to the TCP FIN bit.  A
3550    client is expected to send a DATA frame with the END_STREAM flag set
3551    after receiving a frame bearing the END_STREAM flag.  A proxy that
3552    receives a DATA frame with the END_STREAM flag set sends the attached
3553    data with the FIN bit set on the last TCP segment.  A proxy that
3554    receives a TCP segment with the FIN bit set sends a DATA frame with
3555    the END_STREAM flag set.  Note that the final TCP segment or DATA
3556    frame could be empty.
3557 
3558    A TCP connection error is signaled with RST_STREAM.  A proxy treats
3559    any error in the TCP connection, which includes receiving a TCP
3560    segment with the RST bit set, as a stream error (Section 5.4.2) of
3561    type CONNECT_ERROR.  Correspondingly, a proxy MUST send a TCP segment
3562    with the RST bit set if it detects an error with the stream or the
3563    HTTP/2 connection.
3564 
3565 9.  Additional HTTP Requirements/Considerations
3566 
3567    This section outlines attributes of the HTTP protocol that improve
3568    interoperability, reduce exposure to known security vulnerabilities,
3569    or reduce the potential for implementation variation.
3570 
3571 9.1.  Connection Management
3572 
3573    HTTP/2 connections are persistent.  For best performance, it is
3574    expected clients will not close connections until it is determined
3575    that no further communication with a server is necessary (for
3576    example, when a user navigates away from a particular web page), or
3577    until the server closes the connection.
3578 
3579 
3580 
3581 
3582 
3583 
3584 Belshe, et al.           Expires August 15, 2015               [Page 64]
3585 
3586 Internet-Draft                   HTTP/2                    February 2015
3587 
3588 
3589    Clients SHOULD NOT open more than one HTTP/2 connection to a given
3590    host and port pair, where host is derived from a URI, a selected
3591    alternative service [ALT-SVC], or a configured proxy.
3592 
3593    A client can create additional connections as replacements, either to
3594    replace connections that are near to exhausting the available stream
3595    identifier space (Section 5.1.1), to refresh the keying material for
3596    a TLS connection, or to replace connections that have encountered
3597    errors (Section 5.4.1).
3598 
3599    A client MAY open multiple connections to the same IP address and TCP
3600    port using different Server Name Indication [TLS-EXT] values or to
3601    provide different TLS client certificates, but SHOULD avoid creating
3602    multiple connections with the same configuration.
3603 
3604    Servers are encouraged to maintain open connections for as long as
3605    possible, but are permitted to terminate idle connections if
3606    necessary.  When either endpoint chooses to close the transport-layer
3607    TCP connection, the terminating endpoint SHOULD first send a GOAWAY
3608    (Section 6.8) frame so that both endpoints can reliably determine
3609    whether previously sent frames have been processed and gracefully
3610    complete or terminate any necessary remaining tasks.
3611 
3612 9.1.1.  Connection Reuse
3613 
3614    Connections that are made to an origin server, either directly or
3615    through a tunnel created using the CONNECT method (Section 8.3) MAY
3616    be reused for requests with multiple different URI authority
3617    components.  A connection can be reused as long as the origin server
3618    is authoritative (Section 10.1).  For TCP connections without TLS,
3619    this depends on the host having resolved to the same IP address.
3620 
3621    For "https" resources, connection reuse additionally depends on
3622    having a certificate that is valid for the host in the URI.  The
3623    certificate presented by the server MUST satisfy any checks that the
3624    client would perform when forming a new TLS connection for the host
3625    in the URI.
3626 
3627    An origin server might offer a certificate with multiple
3628    "subjectAltName" attributes, or names with wildcards, one of which is
3629    valid for the authority in the URI.  For example, a certificate with
3630    a "subjectAltName" of "*.example.com" might permit the use of the
3631    same connection for requests to URIs starting with
3632    "https://a.example.com/" and "https://b.example.com/".
3633 
3634    In some deployments, reusing a connection for multiple origins can
3635    result in requests being directed to the wrong origin server.  For
3636    example, TLS termination might be performed by a middlebox that uses
3637 
3638 
3639 
3640 Belshe, et al.           Expires August 15, 2015               [Page 65]
3641 
3642 Internet-Draft                   HTTP/2                    February 2015
3643 
3644 
3645    the TLS Server Name Indication (SNI) [TLS-EXT] extension to select an
3646    origin server.  This means that it is possible for clients to send
3647    confidential information to servers that might not be the intended
3648    target for the request, even though the server is otherwise
3649    authoritative.
3650 
3651    A server that does not wish clients to reuse connections can indicate
3652    that it is not authoritative for a request by sending a 421
3653    (Misdirected Request) status code in response to the request (see
3654    Section 9.1.2).
3655 
3656    A client that is configured to use a proxy over HTTP/2 directs
3657    requests to that proxy through a single connection.  That is, all
3658    requests sent via a proxy reuse the connection to the proxy.
3659 
3660 9.1.2.  The 421 (Misdirected Request) Status Code
3661 
3662    The 421 (Misdirected Request) status code indicates that the request
3663    was directed at a server that is not able to produce a response.
3664    This can be sent by a server that is not configured to produce
3665    responses for the combination of scheme and authority that are
3666    included in the request URI.
3667 
3668    Clients receiving a 421 (Misdirected Request) response from a server
3669    MAY retry the request - whether the request method is idempotent or
3670    not - over a different connection.  This is possible if a connection
3671    is reused (Section 9.1.1) or if an alternative service is selected
3672    ([ALT-SVC]).
3673 
3674    This status code MUST NOT be generated by proxies.
3675 
3676    A 421 response is cacheable by default; i.e., unless otherwise
3677    indicated by the method definition or explicit cache controls (see
3678    Section 4.2.2 of [RFC7234]).
3679 
3680 9.2.  Use of TLS Features
3681 
3682    Implementations of HTTP/2 MUST use TLS [TLS12] version 1.2 or higher
3683    for HTTP/2 over TLS.  The general TLS usage guidance in [TLSBCP]
3684    SHOULD be followed, with some additional restrictions that are
3685    specific to HTTP/2.
3686 
3687    The TLS implementation MUST support the Server Name Indication (SNI)
3688    [TLS-EXT] extension to TLS.  HTTP/2 clients MUST indicate the target
3689    domain name when negotiating TLS.
3690 
3691    Deployments of HTTP/2 that negotiate TLS 1.3 or higher need only
3692    support and use the SNI extension; deployments of TLS 1.2 are subject
3693 
3694 
3695 
3696 Belshe, et al.           Expires August 15, 2015               [Page 66]
3697 
3698 Internet-Draft                   HTTP/2                    February 2015
3699 
3700 
3701    to the requirements in the following sections.  Implementations are
3702    encouraged to provide defaults that comply, but it is recognized that
3703    deployments are ultimately responsible for compliance.
3704 
3705 9.2.1.  TLS 1.2 Features
3706 
3707    This section describes restrictions on the TLS 1.2 feature set that
3708    can be used with HTTP/2.  Due to deployment limitations, it might not
3709    be possible to fail TLS negotiation when these restrictions are not
3710    met.  An endpoint MAY immediately terminate an HTTP/2 connection that
3711    does not meet these TLS requirements with a connection error
3712    (Section 5.4.1) of type INADEQUATE_SECURITY.
3713 
3714    A deployment of HTTP/2 over TLS 1.2 MUST disable compression.  TLS
3715    compression can lead to the exposure of information that would not
3716    otherwise be revealed [RFC3749].  Generic compression is unnecessary
3717    since HTTP/2 provides compression features that are more aware of
3718    context and therefore likely to be more appropriate for use for
3719    performance, security or other reasons.
3720 
3721    A deployment of HTTP/2 over TLS 1.2 MUST disable renegotiation.  An
3722    endpoint MUST treat a TLS renegotiation as a connection error
3723    (Section 5.4.1) of type PROTOCOL_ERROR.  Note that disabling
3724    renegotiation can result in long-lived connections becoming unusable
3725    due to limits on the number of messages the underlying cipher suite
3726    can encipher.
3727 
3728    An endpoint MAY use renegotiation to provide confidentiality
3729    protection for client credentials offered in the handshake, but any
3730    renegotiation MUST occur prior to sending the connection preface.  A
3731    server SHOULD request a client certificate if it sees a renegotiation
3732    request immediately after establishing a connection.
3733 
3734    This effectively prevents the use of renegotiation in response to a
3735    request for a specific protected resource.  A future specification
3736    might provide a way to support this use case.  Alternatively, a
3737    server might use an error (Section 5.4) of type HTTP_1_1_REQUIRED to
3738    request the client use a protocol which supports renegotiation.
3739 
3740    Implementations MUST support ephemeral key exchange sizes of at least
3741    2048 bits for cipher suites that use ephemeral finite field Diffie-
3742    Hellman (DHE) [TLS12] and 224 bits for cipher suites that use
3743    ephemeral elliptic curve Diffie-Hellman (ECDHE) [RFC4492].  Clients
3744    MUST accept DHE sizes of up to 4096 bits.  Endpoints MAY treat
3745    negotiation of key sizes smaller than the lower limits as a
3746    connection error (Section 5.4.1) of type INADEQUATE_SECURITY.
3747 
3748 
3749 
3750 
3751 
3752 Belshe, et al.           Expires August 15, 2015               [Page 67]
3753 
3754 Internet-Draft                   HTTP/2                    February 2015
3755 
3756 
3757 9.2.2.  TLS 1.2 Cipher Suites
3758 
3759    A deployment of HTTP/2 over TLS 1.2 SHOULD NOT use any of the cipher
3760    suites that are listed in the cipher suite black list (Appendix A).
3761 
3762    Endpoints MAY choose to generate a connection error (Section 5.4.1)
3763    of type INADEQUATE_SECURITY if one of the cipher suites from the
3764    black list are negotiated.  A deployment that chooses to use a black-
3765    listed cipher suite risks triggering a connection error unless the
3766    set of potential peers is known to accept that cipher suite.
3767 
3768    Implementations MUST NOT generate this error in reaction to the
3769    negotiation of a cipher suite that is not on the black list.
3770    Consequently, when clients offer a cipher suite that is not on the
3771    black list, they have to be prepared to use that cipher suite with
3772    HTTP/2.
3773 
3774    The black list includes the cipher suite that TLS 1.2 makes
3775    mandatory, which means that TLS 1.2 deployments could have non-
3776    intersecting sets of permitted cipher suites.  To avoid this problem
3777    causing TLS handshake failures, deployments of HTTP/2 that use TLS
3778    1.2 MUST support TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 [TLS-ECDHE]
3779    with the P256 elliptic curve [FIPS186].
3780 
3781    Note that clients might advertise support of cipher suites that are
3782    on the black list in order to allow for connection to servers that do
3783    not support HTTP/2.  This allows servers to select HTTP/1.1 with a
3784    cipher suite that is on the HTTP/2 black list.  However, this can
3785    result in HTTP/2 being negotiated with a black-listed cipher suite if
3786    the application protocol and cipher suite are independently selected.
3787 
3788 10.  Security Considerations
3789 
3790 10.1.  Server Authority
3791 
3792    HTTP/2 relies on the HTTP/1.1 definition of authority for determining
3793    whether a server is authoritative in providing a given response, see
3794    [RFC7230], Section 9.1.  This relies on local name resolution for the
3795    "http" URI scheme, and the authenticated server identity for the
3796    "https" scheme (see [RFC2818], Section 3).
3797 
3798 10.2.  Cross-Protocol Attacks
3799 
3800    In a cross-protocol attack, an attacker causes a client to initiate a
3801    transaction in one protocol toward a server that understands a
3802    different protocol.  An attacker might be able to cause the
3803    transaction to appear as valid transaction in the second protocol.
3804 
3805 
3806 
3807 
3808 Belshe, et al.           Expires August 15, 2015               [Page 68]
3809 
3810 Internet-Draft                   HTTP/2                    February 2015
3811 
3812 
3813    In combination with the capabilities of the web context, this can be
3814    used to interact with poorly protected servers in private networks.
3815 
3816    Completing a TLS handshake with an ALPN identifier for HTTP/2 can be
3817    considered sufficient protection against cross protocol attacks.
3818    ALPN provides a positive indication that a server is willing to
3819    proceed with HTTP/2, which prevents attacks on other TLS-based
3820    protocols.
3821 
3822    The encryption in TLS makes it difficult for attackers to control the
3823    data which could be used in a cross-protocol attack on a cleartext
3824    protocol.
3825 
3826    The cleartext version of HTTP/2 has minimal protection against cross-
3827    protocol attacks.  The connection preface (Section 3.5) contains a
3828    string that is designed to confuse HTTP/1.1 servers, but no special
3829    protection is offered for other protocols.  A server that is willing
3830    to ignore parts of an HTTP/1.1 request containing an Upgrade header
3831    field in addition to the client connection preface could be exposed
3832    to a cross-protocol attack.
3833 
3834 10.3.  Intermediary Encapsulation Attacks
3835 
3836    The HTTP/2 header field encoding allows the expression of names that
3837    are not valid field names in the Internet Message Syntax used by
3838    HTTP/1.1.  Requests or responses containing invalid header field
3839    names MUST be treated as malformed (Section 8.1.2.6).  An
3840    intermediary therefore cannot translate an HTTP/2 request or response
3841    containing an invalid field name into an HTTP/1.1 message.
3842 
3843    Similarly, HTTP/2 allows header field values that are not valid.
3844    While most of the values that can be encoded will not alter header
3845    field parsing, carriage return (CR, ASCII 0xd), line feed (LF, ASCII
3846    0xa), and the zero character (NUL, ASCII 0x0) might be exploited by
3847    an attacker if they are translated verbatim.  Any request or response
3848    that contains a character not permitted in a header field value MUST
3849    be treated as malformed (Section 8.1.2.6).  Valid characters are
3850    defined by the "field-content" ABNF rule in Section 3.2 of [RFC7230].
3851 
3852 10.4.  Cacheability of Pushed Responses
3853 
3854    Pushed responses do not have an explicit request from the client; the
3855    request is provided by the server in the PUSH_PROMISE frame.
3856 
3857    Caching responses that are pushed is possible based on the guidance
3858    provided by the origin server in the Cache-Control header field.
3859    However, this can cause issues if a single server hosts more than one
3860 
3861 
3862 
3863 
3864 Belshe, et al.           Expires August 15, 2015               [Page 69]
3865 
3866 Internet-Draft                   HTTP/2                    February 2015
3867 
3868 
3869    tenant.  For example, a server might offer multiple users each a
3870    small portion of its URI space.
3871 
3872    Where multiple tenants share space on the same server, that server
3873    MUST ensure that tenants are not able to push representations of
3874    resources that they do not have authority over.  Failure to enforce
3875    this would allow a tenant to provide a representation that would be
3876    served out of cache, overriding the actual representation that the
3877    authoritative tenant provides.
3878 
3879    Pushed responses for which an origin server is not authoritative (see
3880    Section 10.1) MUST NOT be used or cached.
3881 
3882 10.5.  Denial of Service Considerations
3883 
3884    An HTTP/2 connection can demand a greater commitment of resources to
3885    operate than a HTTP/1.1 connection.  The use of header compression
3886    and flow control depend on a commitment of resources for storing a
3887    greater amount of state.  Settings for these features ensure that
3888    memory commitments for these features are strictly bounded.
3889 
3890    The number of PUSH_PROMISE frames is not constrained in the same
3891    fashion.  A client that accepts server push SHOULD limit the number
3892    of streams it allows to be in the "reserved (remote)" state.
3893    Excessive number of server push streams can be treated as a stream
3894    error (Section 5.4.2) of type ENHANCE_YOUR_CALM.
3895 
3896    Processing capacity cannot be guarded as effectively as state
3897    capacity.
3898 
3899    The SETTINGS frame can be abused to cause a peer to expend additional
3900    processing time.  This might be done by pointlessly changing SETTINGS
3901    parameters, setting multiple undefined parameters, or changing the
3902    same setting multiple times in the same frame.  WINDOW_UPDATE or
3903    PRIORITY frames can be abused to cause an unnecessary waste of
3904    resources.
3905 
3906    Large numbers of small or empty frames can be abused to cause a peer
3907    to expend time processing frame headers.  Note however that some uses
3908    are entirely legitimate, such as the sending of an empty DATA or
3909    CONTINUATION frame at the end of a stream.
3910 
3911    Header compression also offers some opportunities to waste processing
3912    resources; see Section 7 of [COMPRESSION] for more details on
3913    potential abuses.
3914 
3915    Limits in SETTINGS parameters cannot be reduced instantaneously,
3916    which leaves an endpoint exposed to behavior from a peer that could
3917 
3918 
3919 
3920 Belshe, et al.           Expires August 15, 2015               [Page 70]
3921 
3922 Internet-Draft                   HTTP/2                    February 2015
3923 
3924 
3925    exceed the new limits.  In particular, immediately after establishing
3926    a connection, limits set by a server are not known to clients and
3927    could be exceeded without being an obvious protocol violation.
3928 
3929    All these features - i.e., SETTINGS changes, small frames, header
3930    compression - have legitimate uses.  These features become a burden
3931    only when they are used unnecessarily or to excess.
3932 
3933    An endpoint that doesn't monitor this behavior exposes itself to a
3934    risk of denial of service attack.  Implementations SHOULD track the
3935    use of these features and set limits on their use.  An endpoint MAY
3936    treat activity that is suspicious as a connection error
3937    (Section 5.4.1) of type ENHANCE_YOUR_CALM.
3938 
3939 10.5.1.  Limits on Header Block Size
3940 
3941    A large header block (Section 4.3) can cause an implementation to
3942    commit a large amount of state.  Header fields that are critical for
3943    routing can appear toward the end of a header block, which prevents
3944    streaming of header fields to their ultimate destination.  This
3945    ordering and other reasons, such as ensuring cache correctness, means
3946    that an endpoint might need to buffer the entire header block.  Since
3947    there is no hard limit to the size of a header block, some endpoints
3948    could be forced to commit a large amount of available memory for
3949    header fields.
3950 
3951    An endpoint can use the SETTINGS_MAX_HEADER_LIST_SIZE to advise peers
3952    of limits that might apply on the size of header blocks.  This
3953    setting is only advisory, so endpoints MAY choose to send header
3954    blocks that exceed this limit and risk having the request or response
3955    being treated as malformed.  This setting is specific to a
3956    connection, so any request or response could encounter a hop with a
3957    lower, unknown limit.  An intermediary can attempt to avoid this
3958    problem by passing on values presented by different peers, but they
3959    are not obligated to do so.
3960 
3961    A server that receives a larger header block than it is willing to
3962    handle can send an HTTP 431 (Request Header Fields Too Large) status
3963    code [RFC6585].  A client can discard responses that it cannot
3964    process.  The header block MUST be processed to ensure a consistent
3965    connection state, unless the connection is closed.
3966 
3967 10.5.2.  CONNECT Issues
3968 
3969    The CONNECT method can be used to create disproportionate load on an
3970    proxy, since stream creation is relatively inexpensive when compared
3971    to the creation and maintenance of a TCP connection.  A proxy might
3972    also maintain some resources for a TCP connection beyond the closing
3973 
3974 
3975 
3976 Belshe, et al.           Expires August 15, 2015               [Page 71]
3977 
3978 Internet-Draft                   HTTP/2                    February 2015
3979 
3980 
3981    of the stream that carries the CONNECT request, since the outgoing
3982    TCP connection remains in the TIME_WAIT state.  A proxy therefore
3983    cannot rely on SETTINGS_MAX_CONCURRENT_STREAMS alone to limit the
3984    resources consumed by CONNECT requests.
3985 
3986 10.6.  Use of Compression
3987 
3988    Compression can allow an attacker to recover secret data when it is
3989    compressed in the same context as data under attacker control.
3990    HTTP/2 enables compression of header fields (Section 4.3); the
3991    following concerns also apply to the use of HTTP compressed content-
3992    codings ([RFC7231], Section 3.1.2.1).
3993 
3994    There are demonstrable attacks on compression that exploit the
3995    characteristics of the web (e.g., [BREACH]).  The attacker induces
3996    multiple requests containing varying plaintext, observing the length
3997    of the resulting ciphertext in each, which reveals a shorter length
3998    when a guess about the secret is correct.
3999 
4000    Implementations communicating on a secure channel MUST NOT compress
4001    content that includes both confidential and attacker-controlled data
4002    unless separate compression dictionaries are used for each source of
4003    data.  Compression MUST NOT be used if the source of data cannot be
4004    reliably determined.  Generic stream compression, such as that
4005    provided by TLS MUST NOT be used with HTTP/2 (see Section 9.2).
4006 
4007    Further considerations regarding the compression of header fields are
4008    described in [COMPRESSION].
4009 
4010 10.7.  Use of Padding
4011 
4012    Padding within HTTP/2 is not intended as a replacement for general
4013    purpose padding, such as might be provided by TLS [TLS12].  Redundant
4014    padding could even be counterproductive.  Correct application can
4015    depend on having specific knowledge of the data that is being padded.
4016 
4017    To mitigate attacks that rely on compression, disabling or limiting
4018    compression might be preferable to padding as a countermeasure.
4019 
4020    Padding can be used to obscure the exact size of frame content, and
4021    is provided to mitigate specific attacks within HTTP.  For example,
4022    attacks where compressed content includes both attacker-controlled
4023    plaintext and secret data (see for example, [BREACH]).
4024 
4025    Use of padding can result in less protection than might seem
4026    immediately obvious.  At best, padding only makes it more difficult
4027    for an attacker to infer length information by increasing the number
4028    of frames an attacker has to observe.  Incorrectly implemented
4029 
4030 
4031 
4032 Belshe, et al.           Expires August 15, 2015               [Page 72]
4033 
4034 Internet-Draft                   HTTP/2                    February 2015
4035 
4036 
4037    padding schemes can be easily defeated.  In particular, randomized
4038    padding with a predictable distribution provides very little
4039    protection; similarly, padding payloads to a fixed size exposes
4040    information as payload sizes cross the fixed size boundary, which
4041    could be possible if an attacker can control plaintext.
4042 
4043    Intermediaries SHOULD retain padding for DATA frames, but MAY drop
4044    padding for HEADERS and PUSH_PROMISE frames.  A valid reason for an
4045    intermediary to change the amount of padding of frames is to improve
4046    the protections that padding provides.
4047 
4048 10.8.  Privacy Considerations
4049 
4050    Several characteristics of HTTP/2 provide an observer an opportunity
4051    to correlate actions of a single client or server over time.  This
4052    includes the value of settings, the manner in which flow control
4053    windows are managed, the way priorities are allocated to streams,
4054    timing of reactions to stimulus, and handling of any features that
4055    are controlled by settings.
4056 
4057    As far as this creates observable differences in behavior, they could
4058    be used as a basis for fingerprinting a specific client, as defined
4059    in Section 1.8 of [HTML5].
4060 
4061    HTTP/2's preference for using a single TCP connection allows
4062    correlation of a user's activity on a site.  If connections are
4063    reused for different origins, this allows tracking across those
4064    origins.
4065 
4066    Because the PING and SETTINGS frames solicit immediate responses,
4067    they can be used by an endpoint to measure latency to their peer.
4068    This might have privacy implications in certain scenarios.
4069 
4070 11.  IANA Considerations
4071 
4072    A string for identifying HTTP/2 is entered into the "Application
4073    Layer Protocol Negotiation (ALPN) Protocol IDs" registry established
4074    in [TLS-ALPN].
4075 
4076    This document establishes a registry for frame types, settings, and
4077    error codes.  These new registries are entered into a new "Hypertext
4078    Transfer Protocol (HTTP) 2 Parameters" section.
4079 
4080    This document registers the "HTTP2-Settings" header field for use in
4081    HTTP; and the 421 (Misdirected Request) status code.
4082 
4083    This document registers the "PRI" method for use in HTTP, to avoid
4084    collisions with the connection preface (Section 3.5).
4085 
4086 
4087 
4088 Belshe, et al.           Expires August 15, 2015               [Page 73]
4089 
4090 Internet-Draft                   HTTP/2                    February 2015
4091 
4092 
4093 11.1.  Registration of HTTP/2 Identification Strings
4094 
4095    This document creates two registrations for the identification of
4096    HTTP/2 in the "Application Layer Protocol Negotiation (ALPN) Protocol
4097    IDs" registry established in [TLS-ALPN].
4098 
4099    The "h2" string identifies HTTP/2 when used over TLS:
4100 
4101    Protocol:  HTTP/2 over TLS
4102 
4103    Identification Sequence:  0x68 0x32 ("h2")
4104 
4105    Specification:  This document
4106 
4107    The "h2c" string identifies HTTP/2 when used over cleartext TCP:
4108 
4109    Protocol:  HTTP/2 over TCP
4110 
4111    Identification Sequence:  0x68 0x32 0x63 ("h2c")
4112 
4113    Specification:  This document
4114 
4115 11.2.  Frame Type Registry
4116 
4117    This document establishes a registry for HTTP/2 frame type codes.
4118    The "HTTP/2 Frame Type" registry manages an 8-bit space.  The "HTTP/2
4119    Frame Type" registry operates under either of the "IETF Review" or
4120    "IESG Approval" policies [RFC5226] for values between 0x00 and 0xef,
4121    with values between 0xf0 and 0xff being reserved for experimental
4122    use.
4123 
4124    New entries in this registry require the following information:
4125 
4126    Frame Type:  A name or label for the frame type.
4127 
4128    Code:  The 8-bit code assigned to the frame type.
4129 
4130    Specification:  A reference to a specification that includes a
4131       description of the frame layout, its semantics, and flags that the
4132       frame type uses, including any parts of the frame that are
4133       conditionally present based on the value of flags.
4134 
4135    The entries in the following table are registered by this document.
4136 
4137 
4138 
4139 
4140 
4141 
4142 
4143 
4144 Belshe, et al.           Expires August 15, 2015               [Page 74]
4145 
4146 Internet-Draft                   HTTP/2                    February 2015
4147 
4148 
4149    +---------------+------+--------------+
4150    | Frame Type    | Code | Section      |
4151    +---------------+------+--------------+
4152    | DATA          | 0x0  | Section 6.1  |
4153    | HEADERS       | 0x1  | Section 6.2  |
4154    | PRIORITY      | 0x2  | Section 6.3  |
4155    | RST_STREAM    | 0x3  | Section 6.4  |
4156    | SETTINGS      | 0x4  | Section 6.5  |
4157    | PUSH_PROMISE  | 0x5  | Section 6.6  |
4158    | PING          | 0x6  | Section 6.7  |
4159    | GOAWAY        | 0x7  | Section 6.8  |
4160    | WINDOW_UPDATE | 0x8  | Section 6.9  |
4161    | CONTINUATION  | 0x9  | Section 6.10 |
4162    +---------------+------+--------------+
4163 
4164 11.3.  Settings Registry
4165 
4166    This document establishes a registry for HTTP/2 settings.  The
4167    "HTTP/2 Settings" registry manages a 16-bit space.  The "HTTP/2
4168    Settings" registry operates under the "Expert Review" policy
4169    [RFC5226] for values in the range from 0x0000 to 0xefff, with values
4170    between and 0xf000 and 0xffff being reserved for experimental use.
4171 
4172    New registrations are advised to provide the following information:
4173 
4174    Name:  A symbolic name for the setting.  Specifying a setting name is
4175       optional.
4176 
4177    Code:  The 16-bit code assigned to the setting.
4178 
4179    Initial Value:  An initial value for the setting.
4180 
4181    Specification:  An optional reference to a specification that
4182       describes the use of the setting.
4183 
4184    An initial set of setting registrations can be found in
4185    Section 6.5.2.
4186 
4187    +------------------------+------+---------------+---------------+
4188    | Name                   | Code | Initial Value | Specification |
4189    +------------------------+------+---------------+---------------+
4190    | HEADER_TABLE_SIZE      | 0x1  | 4096          | Section 6.5.2 |
4191    | ENABLE_PUSH            | 0x2  | 1             | Section 6.5.2 |
4192    | MAX_CONCURRENT_STREAMS | 0x3  | (infinite)    | Section 6.5.2 |
4193    | INITIAL_WINDOW_SIZE    | 0x4  | 65535         | Section 6.5.2 |
4194    | MAX_FRAME_SIZE         | 0x5  | 16384         | Section 6.5.2 |
4195    | MAX_HEADER_LIST_SIZE   | 0x6  | (infinite)    | Section 6.5.2 |
4196    +------------------------+------+---------------+---------------+
4197 
4198 
4199 
4200 Belshe, et al.           Expires August 15, 2015               [Page 75]
4201 
4202 Internet-Draft                   HTTP/2                    February 2015
4203 
4204 
4205 11.4.  Error Code Registry
4206 
4207    This document establishes a registry for HTTP/2 error codes.  The
4208    "HTTP/2 Error Code" registry manages a 32-bit space.  The "HTTP/2
4209    Error Code" registry operates under the "Expert Review" policy
4210    [RFC5226].
4211 
4212    Registrations for error codes are required to include a description
4213    of the error code.  An expert reviewer is advised to examine new
4214    registrations for possible duplication with existing error codes.
4215    Use of existing registrations is to be encouraged, but not mandated.
4216 
4217    New registrations are advised to provide the following information:
4218 
4219    Name:  A name for the error code.  Specifying an error code name is
4220       optional.
4221 
4222    Code:  The 32-bit error code value.
4223 
4224    Description:  A brief description of the error code semantics, longer
4225       if no detailed specification is provided.
4226 
4227    Specification:  An optional reference for a specification that
4228       defines the error code.
4229 
4230    The entries in the following table are registered by this document.
4231 
4232 
4233 
4234 
4235 
4236 
4237 
4238 
4239 
4240 
4241 
4242 
4243 
4244 
4245 
4246 
4247 
4248 
4249 
4250 
4251 
4252 
4253 
4254 
4255 
4256 Belshe, et al.           Expires August 15, 2015               [Page 76]
4257 
4258 Internet-Draft                   HTTP/2                    February 2015
4259 
4260 
4261    +---------------------+------+----------------------+---------------+
4262    | Name                | Code | Description          | Specification |
4263    +---------------------+------+----------------------+---------------+
4264    | NO_ERROR            | 0x0  | Graceful shutdown    | Section 7     |
4265    | PROTOCOL_ERROR      | 0x1  | Protocol error       | Section 7     |
4266    |                     |      | detected             |               |
4267    | INTERNAL_ERROR      | 0x2  | Implementation fault | Section 7     |
4268    | FLOW_CONTROL_ERROR  | 0x3  | Flow control limits  | Section 7     |
4269    |                     |      | exceeded             |               |
4270    | SETTINGS_TIMEOUT    | 0x4  | Settings not         | Section 7     |
4271    |                     |      | acknowledged         |               |
4272    | STREAM_CLOSED       | 0x5  | Frame received for   | Section 7     |
4273    |                     |      | closed stream        |               |
4274    | FRAME_SIZE_ERROR    | 0x6  | Frame size incorrect | Section 7     |
4275    | REFUSED_STREAM      | 0x7  | Stream not processed | Section 7     |
4276    | CANCEL              | 0x8  | Stream cancelled     | Section 7     |
4277    | COMPRESSION_ERROR   | 0x9  | Compression state    | Section 7     |
4278    |                     |      | not updated          |               |
4279    | CONNECT_ERROR       | 0xa  | TCP connection error | Section 7     |
4280    |                     |      | for CONNECT method   |               |
4281    | ENHANCE_YOUR_CALM   | 0xb  | Processing capacity  | Section 7     |
4282    |                     |      | exceeded             |               |
4283    | INADEQUATE_SECURITY | 0xc  | Negotiated TLS       | Section 7     |
4284    |                     |      | parameters not       |               |
4285    |                     |      | acceptable           |               |
4286    | HTTP_1_1_REQUIRED   | 0xd  | Use HTTP/1.1 for the | Section 7     |
4287    |                     |      | request              |               |
4288    +---------------------+------+----------------------+---------------+
4289 
4290 11.5.  HTTP2-Settings Header Field Registration
4291 
4292    This section registers the "HTTP2-Settings" header field in the
4293    Permanent Message Header Field Registry [BCP90].
4294 
4295    Header field name:  HTTP2-Settings
4296 
4297    Applicable protocol:  http
4298 
4299    Status:  standard
4300 
4301    Author/Change controller:  IETF
4302 
4303    Specification document(s):  Section 3.2.1 of this document
4304 
4305    Related information:  This header field is only used by an HTTP/2
4306       client for Upgrade-based negotiation.
4307 
4308 
4309 
4310 
4311 
4312 Belshe, et al.           Expires August 15, 2015               [Page 77]
4313 
4314 Internet-Draft                   HTTP/2                    February 2015
4315 
4316 
4317 11.6.  PRI Method Registration
4318 
4319    This section registers the "PRI" method in the HTTP Method Registry
4320    ([RFC7231], Section 8.1).
4321 
4322    Method Name:  PRI
4323 
4324    Safe  Yes
4325 
4326    Idempotent  Yes
4327 
4328    Specification document(s)  Section 3.5 of this document
4329 
4330    Related information:  This method is never used by an actual client.
4331       This method will appear to be used when an HTTP/1.1 server or
4332       intermediary attempts to parse an HTTP/2 connection preface.
4333 
4334 11.7.  The 421 (Misdirected Request) HTTP Status Code
4335 
4336    This document registers the 421 (Misdirected Request) HTTP Status
4337    code in the Hypertext Transfer Protocol (HTTP) Status Code Registry
4338    ([RFC7231], Section 8.2).
4339 
4340    Status Code:  421
4341 
4342    Short Description:  Misdirected Request
4343 
4344    Specification:  Section 9.1.2 of this document
4345 
4346 12.  Acknowledgements
4347 
4348    This document includes substantial input from the following
4349    individuals:
4350 
4351    o  Adam Langley, Wan-Teh Chang, Jim Morrison, Mark Nottingham, Alyssa
4352       Wilk, Costin Manolache, William Chan, Vitaliy Lvin, Joe Chan, Adam
4353       Barth, Ryan Hamilton, Gavin Peters, Kent Alstad, Kevin Lindsay,
4354       Paul Amer, Fan Yang, Jonathan Leighton (SPDY contributors).
4355 
4356    o  Gabriel Montenegro and Willy Tarreau (Upgrade mechanism).
4357 
4358    o  William Chan, Salvatore Loreto, Osama Mazahir, Gabriel Montenegro,
4359       Jitu Padhye, Roberto Peon, Rob Trace (Flow control).
4360 
4361    o  Mike Bishop (Extensibility).
4362 
4363    o  Mark Nottingham, Julian Reschke, James Snell, Jeff Pinner, Mike
4364       Bishop, Herve Ruellan (Substantial editorial contributions).
4365 
4366 
4367 
4368 Belshe, et al.           Expires August 15, 2015               [Page 78]
4369 
4370 Internet-Draft                   HTTP/2                    February 2015
4371 
4372 
4373    o  Kari Hurtta, Tatsuhiro Tsujikawa, Greg Wilkins, Poul-Henning Kamp,
4374       Jonathan Thackray.
4375 
4376    o  Alexey Melnikov was an editor of this document during 2013.
4377 
4378    o  A substantial proportion of Martin's contribution was supported by
4379       Microsoft during his employment there.
4380 
4381    o  The Japanese HTTP/2 community provided an invaluable contribution,
4382       including a number of implementations, plus numerous technical and
4383       editorial contributions.
4384 
4385 13.  References
4386 
4387 13.1.  Normative References
4388 
4389    [COMPRESSION]
4390               Ruellan, H. and R. Peon, "HPACK - Header Compression for
4391               HTTP/2", draft-ietf-httpbis-header-compression-11 (work in
4392               progress), February 2015.
4393 
4394    [COOKIE]   Barth, A., "HTTP State Management Mechanism", RFC 6265,
4395               April 2011.
4396 
4397    [FIPS186]  NIST, "Digital Signature Standard (DSS)", FIPS PUB 186-4,
4398               July 2013, <http://dx.doi.org/10.6028/NIST.FIPS.186-4>.
4399 
4400    [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
4401               Requirement Levels", BCP 14, RFC 2119, March 1997.
4402 
4403    [RFC2818]  Rescorla, E., "HTTP Over TLS", RFC 2818, May 2000.
4404 
4405    [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform
4406               Resource Identifier (URI): Generic Syntax", STD 66, RFC
4407               3986, January 2005.
4408 
4409    [RFC4648]  Josefsson, S., "The Base16, Base32, and Base64 Data
4410               Encodings", RFC 4648, October 2006.
4411 
4412    [RFC5226]  Narten, T. and H. Alvestrand, "Guidelines for Writing an
4413               IANA Considerations Section in RFCs", BCP 26, RFC 5226,
4414               May 2008.
4415 
4416    [RFC5234]  Crocker, D. and P. Overell, "Augmented BNF for Syntax
4417               Specifications: ABNF", STD 68, RFC 5234, January 2008.
4418 
4419 
4420 
4421 
4422 
4423 
4424 Belshe, et al.           Expires August 15, 2015               [Page 79]
4425 
4426 Internet-Draft                   HTTP/2                    February 2015
4427 
4428 
4429    [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
4430               Protocol (HTTP/1.1): Message Syntax and Routing", RFC
4431               7230, June 2014.
4432 
4433    [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
4434               Protocol (HTTP/1.1): Semantics and Content", RFC 7231,
4435               June 2014.
4436 
4437    [RFC7232]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
4438               Protocol (HTTP/1.1): Conditional Requests", RFC 7232, June
4439               2014.
4440 
4441    [RFC7233]  Fielding, R., Ed., Lafon, Y., Ed., and J. Reschke, Ed.,
4442               "Hypertext Transfer Protocol (HTTP/1.1): Range Requests",
4443               RFC 7233, June 2014.
4444 
4445    [RFC7234]  Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
4446               Ed., "Hypertext Transfer Protocol (HTTP/1.1): Caching",
4447               RFC 7234, June 2014.
4448 
4449    [RFC7235]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
4450               Protocol (HTTP/1.1): Authentication", RFC 7235, June 2014.
4451 
4452    [TCP]      Postel, J., "Transmission Control Protocol", STD 7, RFC
4453               793, September 1981.
4454 
4455    [TLS-ALPN]
4456               Friedl, S., Popov, A., Langley, A., and E. Stephan,
4457               "Transport Layer Security (TLS) Application-Layer Protocol
4458               Negotiation Extension", RFC 7301, July 2014.
4459 
4460    [TLS-ECDHE]
4461               Rescorla, E., "TLS Elliptic Curve Cipher Suites with
4462               SHA-256/384 and AES Galois Counter Mode (GCM)", RFC 5289,
4463               August 2008.
4464 
4465    [TLS-EXT]  Eastlake, D., "Transport Layer Security (TLS) Extensions:
4466               Extension Definitions", RFC 6066, January 2011.
4467 
4468    [TLS12]    Dierks, T. and E. Rescorla, "The Transport Layer Security
4469               (TLS) Protocol Version 1.2", RFC 5246, August 2008.
4470 
4471 13.2.  Informative References
4472 
4473    [ALT-SVC]  Nottingham, M., McManus, P., and J. Reschke, "HTTP
4474               Alternative Services", draft-ietf-httpbis-alt-svc-06 (work
4475               in progress), February 2015.
4476 
4477 
4478 
4479 
4480 Belshe, et al.           Expires August 15, 2015               [Page 80]
4481 
4482 Internet-Draft                   HTTP/2                    February 2015
4483 
4484 
4485    [BCP90]    Klyne, G., Nottingham, M., and J. Mogul, "Registration
4486               Procedures for Message Header Fields", BCP 90, RFC 3864,
4487               September 2004.
4488 
4489    [BREACH]   Gluck, Y., Harris, N., and A. Prado, "BREACH: Reviving the
4490               CRIME Attack", July 2013, <http://breachattack.com/
4491               resources/
4492               BREACH%20-%20SSL,%20gone%20in%2030%20seconds.pdf>.
4493 
4494    [HTML5]    Hickson, I., Berjon, R., Faulkner, S., Leithead, T., Doyle
4495               Navara, E., O'Connor, E., and S. Pfeiffer, "HTML5", W3C
4496               Recommendation REC-html5-20141028, October 2014,
4497               <http://www.w3.org/TR/2014/REC-html5-20141028/>.
4498 
4499               Latest version available at [5].
4500 
4501    [RFC3749]  Hollenbeck, S., "Transport Layer Security Protocol
4502               Compression Methods", RFC 3749, May 2004.
4503 
4504    [RFC4492]  Blake-Wilson, S., Bolyard, N., Gupta, V., Hawk, C., and B.
4505               Moeller, "Elliptic Curve Cryptography (ECC) Cipher Suites
4506               for Transport Layer Security (TLS)", RFC 4492, May 2006.
4507 
4508    [RFC6585]  Nottingham, M. and R. Fielding, "Additional HTTP Status
4509               Codes", RFC 6585, April 2012.
4510 
4511    [RFC7323]  Borman, D., Braden, B., Jacobson, V., and R.
4512               Scheffenegger, "TCP Extensions for High Performance", RFC
4513               7323, September 2014.
4514 
4515    [TALKING]  Huang, L-S., Chen, E., Barth, A., Rescorla, E., and C.
4516               Jackson, "Talking to Yourself for Fun and Profit", 2011,
4517               <http://w2spconf.com/2011/papers/websocket.pdf>.
4518 
4519    [TLSBCP]   Sheffer, Y., Holz, R., and P. Saint-Andre,
4520               "Recommendations for Secure Use of TLS and DTLS", draft-
4521               ietf-uta-tls-bcp-08 (work in progress), December 2014.
4522 
4523 13.3.  URIs
4524 
4525    [1] https://www.iana.org/assignments/message-headers
4526 
4527    [2] https://groups.google.com/forum/?fromgroups#!topic/spdy-dev/
4528        cfUef2gL3iU
4529 
4530    [3] https://tools.ietf.org/html/draft-montenegro-httpbis-http2-fc-
4531        principles-01
4532 
4533 
4534 
4535 
4536 Belshe, et al.           Expires August 15, 2015               [Page 81]
4537 
4538 Internet-Draft                   HTTP/2                    February 2015
4539 
4540 
4541 Appendix A.  TLS 1.2 Cipher Suite Black List
4542 
4543    An HTTP/2 implementation MAY treat the negotiation of any of the
4544    following cipher suites with TLS 1.2 as a connection error
4545    (Section 5.4.1) of type INADEQUATE_SECURITY: TLS_NULL_WITH_NULL_NULL,
4546    TLS_RSA_WITH_NULL_MD5, TLS_RSA_WITH_NULL_SHA,
4547    TLS_RSA_EXPORT_WITH_RC4_40_MD5, TLS_RSA_WITH_RC4_128_MD5,
4548    TLS_RSA_WITH_RC4_128_SHA, TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5,
4549    TLS_RSA_WITH_IDEA_CBC_SHA, TLS_RSA_EXPORT_WITH_DES40_CBC_SHA,
4550    TLS_RSA_WITH_DES_CBC_SHA, TLS_RSA_WITH_3DES_EDE_CBC_SHA,
4551    TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA, TLS_DH_DSS_WITH_DES_CBC_SHA,
4552    TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA,
4553    TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA, TLS_DH_RSA_WITH_DES_CBC_SHA,
4554    TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA,
4555    TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA, TLS_DHE_DSS_WITH_DES_CBC_SHA,
4556    TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA,
4557    TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA, TLS_DHE_RSA_WITH_DES_CBC_SHA,
4558    TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA,
4559    TLS_DH_anon_EXPORT_WITH_RC4_40_MD5, TLS_DH_anon_WITH_RC4_128_MD5,
4560    TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA, TLS_DH_anon_WITH_DES_CBC_SHA,
4561    TLS_DH_anon_WITH_3DES_EDE_CBC_SHA, TLS_KRB5_WITH_DES_CBC_SHA,
4562    TLS_KRB5_WITH_3DES_EDE_CBC_SHA, TLS_KRB5_WITH_RC4_128_SHA,
4563    TLS_KRB5_WITH_IDEA_CBC_SHA, TLS_KRB5_WITH_DES_CBC_MD5,
4564    TLS_KRB5_WITH_3DES_EDE_CBC_MD5, TLS_KRB5_WITH_RC4_128_MD5,
4565    TLS_KRB5_WITH_IDEA_CBC_MD5, TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA,
4566    TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA, TLS_KRB5_EXPORT_WITH_RC4_40_SHA,
4567    TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5,
4568    TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5, TLS_KRB5_EXPORT_WITH_RC4_40_MD5,
4569    TLS_PSK_WITH_NULL_SHA, TLS_DHE_PSK_WITH_NULL_SHA,
4570    TLS_RSA_PSK_WITH_NULL_SHA, TLS_RSA_WITH_AES_128_CBC_SHA,
4571    TLS_DH_DSS_WITH_AES_128_CBC_SHA, TLS_DH_RSA_WITH_AES_128_CBC_SHA,
4572    TLS_DHE_DSS_WITH_AES_128_CBC_SHA, TLS_DHE_RSA_WITH_AES_128_CBC_SHA,
4573    TLS_DH_anon_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_256_CBC_SHA,
4574    TLS_DH_DSS_WITH_AES_256_CBC_SHA, TLS_DH_RSA_WITH_AES_256_CBC_SHA,
4575    TLS_DHE_DSS_WITH_AES_256_CBC_SHA, TLS_DHE_RSA_WITH_AES_256_CBC_SHA,
4576    TLS_DH_anon_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_NULL_SHA256,
4577    TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA256,
4578    TLS_DH_DSS_WITH_AES_128_CBC_SHA256,
4579    TLS_DH_RSA_WITH_AES_128_CBC_SHA256,
4580    TLS_DHE_DSS_WITH_AES_128_CBC_SHA256,
4581    TLS_RSA_WITH_CAMELLIA_128_CBC_SHA,
4582 TH_CAMELLIA_128_CBC_SHA,   TLS_DH_DSS_WI
4583    TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA,
4584    TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA,
4585    TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,
4586    TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA,
4587    TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,
4588    TLS_DH_DSS_WITH_AES_256_CBC_SHA256,
4589 
4590 
4591 
4592 Belshe, et al.           Expires August 15, 2015               [Page 82]
4593 
4594 Internet-Draft                   HTTP/2                    February 2015
4595 
4596 
4597    TLS_DH_RSA_WITH_AES_256_CBC_SHA256,
4598    TLS_DHE_DSS_WITH_AES_256_CBC_SHA256,
4599    TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,
4600    TLS_DH_anon_WITH_AES_128_CBC_SHA256,
4601    TLS_DH_anon_WITH_AES_256_CBC_SHA256,
4602    TLS_RSA_WITH_CAMELLIA_256_CBC_SHA,
4603    TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA,
4604    TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA,
4605    TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA,
4606    TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,
4607    TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA, TLS_PSK_WITH_RC4_128_SHA,
4608    TLS_PSK_WITH_3DES_EDE_CBC_SHA, TLS_PSK_WITH_AES_128_CBC_SHA,
4609    TLS_PSK_WITH_AES_256_CBC_SHA, TLS_DHE_PSK_WITH_RC4_128_SHA,
4610    TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA, TLS_DHE_PSK_WITH_AES_128_CBC_SHA,
4611    TLS_DHE_PSK_WITH_AES_256_CBC_SHA, TLS_RSA_PSK_WITH_RC4_128_SHA,
4612    TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA, TLS_RSA_PSK_WITH_AES_128_CBC_SHA,
4613    TLS_RSA_PSK_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_SEED_CBC_SHA,
4614    TLS_DH_DSS_WITH_SEED_CBC_SHA, TLS_DH_RSA_WITH_SEED_CBC_SHA,
4615    TLS_DHE_DSS_WITH_SEED_CBC_SHA, TLS_DHE_RSA_WITH_SEED_CBC_SHA,
4616    TLS_DH_anon_WITH_SEED_CBC_SHA, TLS_RSA_WITH_AES_128_GCM_SHA256,
4617    TLS_RSA_WITH_AES_256_GCM_SHA384, TLS_DH_RSA_WITH_AES_128_GCM_SHA256,
4618    TLS_DH_RSA_WITH_AES_256_GCM_SHA384,
4619    TLS_DH_DSS_WITH_AES_128_GCM_SHA256,
4620    TLS_DH_DSS_WITH_AES_256_GCM_SHA384,
4621    TLS_DH_anon_WITH_AES_128_GCM_SHA256,
4622    TLS_DH_anon_WITH_AES_256_GCM_SHA384, TLS_PSK_WITH_AES_128_GCM_SHA256,
4623    TLS_PSK_WITH_AES_256_GCM_SHA384, TLS_RSA_PSK_WITH_AES_128_GCM_SHA256,
4624    TLS_RSA_PSK_WITH_AES_256_GCM_SHA384, TLS_PSK_WITH_AES_128_CBC_SHA256,
4625    TLS_PSK_WITH_AES_256_CBC_SHA384, TLS_PSK_WITH_NULL_SHA256,
4626    TLS_PSK_WITH_NULL_SHA384, TLS_DHE_PSK_WITH_AES_128_CBC_SHA256,
4627    TLS_DHE_PSK_WITH_AES_256_CBC_SHA384, TLS_DHE_PSK_WITH_NULL_SHA256,
4628    TLS_DHE_PSK_WITH_NULL_SHA384, TLS_RSA_PSK_WITH_AES_128_CBC_SHA256,
4629    TLS_RSA_PSK_WITH_AES_256_CBC_SHA384, TLS_RSA_PSK_WITH_NULL_SHA256,
4630    TLS_RSA_PSK_WITH_NULL_SHA384, TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256,
4631    TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256,
4632    TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256,
4633    TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256,
4634    TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256,
4635    TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256,
4636    TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256,
4637    TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256,
4638    TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256,
4639    TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256,
4640    TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256,
4641    TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256,
4642    TLS_EMPTY_RENEGOTIATION_INFO_SCSV, TLS_ECDH_ECDSA_WITH_NULL_SHA,
4643    TLS_ECDH_ECDSA_WITH_RC4_128_SHA,
4644    TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA,
4645 
4646 
4647 
4648 Belshe, et al.           Expires August 15, 2015               [Page 83]
4649 
4650 Internet-Draft                   HTTP/2                    February 2015
4651 
4652 
4653    TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA,
4654    TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_NULL_SHA,
4655    TLS_ECDHE_ECDSA_WITH_RC4_128_SHA,
4656    TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA,
4657    TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
4658    TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDH_RSA_WITH_NULL_SHA,
4659    TLS_ECDH_RSA_WITH_RC4_128_SHA, TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA,
4660    TLS_ECDH_RSA_WITH_AES_128_CBC_SHA, TLS_ECDH_RSA_WITH_AES_256_CBC_SHA,
4661    TLS_ECDHE_RSA_WITH_NULL_SHA, TLS_ECDHE_RSA_WITH_RC4_128_SHA,
4662    TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,
4663    TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
4664    TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_ECDH_anon_WITH_NULL_SHA,
4665    TLS_ECDH_anon_WITH_RC4_128_SHA, TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA,
4666    TLS_ECDH_anon_WITH_AES_128_CBC_SHA,
4667    TLS_ECDH_anon_WITH_AES_256_CBC_SHA,
4668    TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA,
4669    TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA,
4670    TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA,
4671    TLS_SRP_SHA_WITH_AES_128_CBC_SHA,
4672    TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA,
4673    TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA,
4674    TLS_SRP_SHA_WITH_AES_256_CBC_SHA,
4675    TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA,
4676    TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA,
4677    TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,
4678    TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,
4679    TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256,
4680    TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384,
4681    TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,
4682    TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,
4683    TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256,
4684    TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384,
4685    TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,
4686    TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384,
4687    TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256,
4688    TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_PSK_WITH_RC4_128_SHA,
4689    TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA,
4690    TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA,
4691    TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA,
4692    TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256,
4693    TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384, TLS_ECDHE_PSK_WITH_NULL_SHA,
4694    TLS_ECDHE_PSK_WITH_NULL_SHA256, TLS_ECDHE_PSK_WITH_NULL_SHA384,
4695    TLS_RSA_WITH_ARIA_128_CBC_SHA256, TLS_RSA_WITH_ARIA_256_CBC_SHA384,
4696    TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256,
4697    TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384,
4698    TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256,
4699    TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384,
4700    TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256,
4701 
4702 
4703 
4704 Belshe, et al.           Expires August 15, 2015               [Page 84]
4705 
4706 Internet-Draft                   HTTP/2                    February 2015
4707 
4708 
4709    TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384,
4710    TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256,
4711    TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384,
4712    TLS_DH_anon_WITH_ARIA_128_CBC_SHA256,
4713    TLS_DH_anon_WITH_ARIA_256_CBC_SHA384,
4714    TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256,
4715    TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384,
4716    TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256,
4717    TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384,
4718    TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256,
4719    TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384,
4720    TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256,
4721    TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384,
4722    TLS_RSA_WITH_ARIA_128_GCM_SHA256, TLS_RSA_WITH_ARIA_256_GCM_SHA384,
4723    TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256,
4724    TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384,
4725    TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256,
4726    TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384,
4727    TLS_DH_anon_WITH_ARIA_128_GCM_SHA256,
4728    TLS_DH_anon_WITH_ARIA_256_GCM_SHA384,
4729    TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256,
4730    TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384,
4731    TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256,
4732    TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384,
4733    TLS_PSK_WITH_ARIA_128_CBC_SHA256, TLS_PSK_WITH_ARIA_256_CBC_SHA384,
4734    TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256,
4735    TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384,
4736    TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256,
4737    TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384,
4738    TLS_PSK_WITH_ARIA_128_GCM_SHA256, TLS_PSK_WITH_ARIA_256_GCM_SHA384,
4739    TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256,
4740    TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384,
4741    TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256,
4742    TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384,
4743    TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256,
4744    TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384,
4745    TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256,
4746    TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384,
4747    TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256,
4748    TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384,
4749    TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256,
4750    TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384,
4751    TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256,
4752    TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384,
4753    TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256,
4754    TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384,
4755    TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256,
4756    TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384,
4757 
4758 
4759 
4760 Belshe, et al.           Expires August 15, 2015               [Page 85]
4761 
4762 Internet-Draft                   HTTP/2                    February 2015
4763 
4764 
4765    TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256,
4766    TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384,
4767    TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256,
4768    TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384,
4769    TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256,
4770    TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384,
4771    TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256,
4772    TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384,
4773    TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256,
4774    TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384,
4775    TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256,
4776    TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384,
4777    TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256,
4778    TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384,
4779    TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256,
4780    TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384,
4781    TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256,
4782    TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384, TLS_RSA_WITH_AES_128_CCM,
4783    TLS_RSA_WITH_AES_256_CCM, TLS_RSA_WITH_AES_128_CCM_8,
4784    TLS_RSA_WITH_AES_256_CCM_8, TLS_PSK_WITH_AES_128_CCM,
4785    TLS_PSK_WITH_AES_256_CCM, TLS_PSK_WITH_AES_128_CCM_8,
4786    TLS_PSK_WITH_AES_256_CCM_8.
4787 
4788    Note:  This list was assembled from the set of registered TLS cipher
4789       suites at the time of writing.  This list includes those cipher
4790       suites that do not offer an ephemeral key exchange and those that
4791       are based on the TLS null, stream or block cipher type (as defined
4792       in Section 6.2.3 of [TLS12]).  Additional cipher suites with these
4793       properties could be defined; these would not be explicitly
4794       prohibited.
4795 
4796 Appendix B.  Change Log
4797 
4798    This section is to be removed by RFC Editor before publication.
4799 
4800 B.1.  Since draft-ietf-httpbis-http2-15
4801 
4802    Enabled the sending of PRIORITY for any stream state.
4803 
4804    Added a cipher suite blacklist and made several changes to the TLS
4805    usage section.
4806 
4807 B.2.  Since draft-ietf-httpbis-http2-14
4808 
4809    Renamed Not Authoritative status code to Misdirected Request.
4810 
4811    Added HTTP_1_1_REQUIRED error code.
4812 
4813 
4814 
4815 
4816 Belshe, et al.           Expires August 15, 2015               [Page 86]
4817 
4818 Internet-Draft                   HTTP/2                    February 2015
4819 
4820 
4821 B.3.  Since draft-ietf-httpbis-http2-13
4822 
4823    Pseudo-header fields are now required to appear strictly before
4824    regular ones.
4825 
4826    Restored 1xx series status codes, except 101.
4827 
4828    Changed frame length field 24-bits.  Expanded frame header to 9
4829    octets.  Added a setting to limit the damage.
4830 
4831    Added a setting to advise peers of header set size limits.
4832 
4833    Removed segments.
4834 
4835    Made non-semantic-bearing HEADERS frames illegal in the HTTP mapping.
4836 
4837 B.4.  Since draft-ietf-httpbis-http2-12
4838 
4839    Restored extensibility options.
4840 
4841    Restricting TLS cipher suites to AEAD only.
4842 
4843    Removing Content-Encoding requirements.
4844 
4845    Permitting the use of PRIORITY after stream close.
4846 
4847    Removed ALTSVC frame.
4848 
4849    Removed BLOCKED frame.
4850 
4851    Reducing the maximum padding size to 256 octets; removing padding
4852    from CONTINUATION frames.
4853 
4854    Removed per-frame GZIP compression.
4855 
4856 B.5.  Since draft-ietf-httpbis-http2-11
4857 
4858    Added BLOCKED frame (at risk).
4859 
4860    Simplified priority scheme.
4861 
4862    Added DATA per-frame GZIP compression.
4863 
4864 B.6.  Since draft-ietf-httpbis-http2-10
4865 
4866    Changed "connection header" to "connection preface" to avoid
4867    confusion.
4868 
4869 
4870 
4871 
4872 Belshe, et al.           Expires August 15, 2015               [Page 87]
4873 
4874 Internet-Draft                   HTTP/2                    February 2015
4875 
4876 
4877    Added dependency-based stream prioritization.
4878 
4879    Added "h2c" identifier to distinguish between cleartext and secured
4880    HTTP/2.
4881 
4882    Adding missing padding to PUSH_PROMISE.
4883 
4884    Integrate ALTSVC frame and supporting text.
4885 
4886    Dropping requirement on "deflate" Content-Encoding.
4887 
4888    Improving security considerations around use of compression.
4889 
4890 B.7.  Since draft-ietf-httpbis-http2-09
4891 
4892    Adding padding for data frames.
4893 
4894    Renumbering frame types, error codes, and settings.
4895 
4896    Adding INADEQUATE_SECURITY error code.
4897 
4898    Updating TLS usage requirements to 1.2; forbidding TLS compression.
4899 
4900    Removing extensibility for frames and settings.
4901 
4902    Changing setting identifier size.
4903 
4904    Removing the ability to disable flow control.
4905 
4906    Changing the protocol identification token to "h2".
4907 
4908    Changing the use of :authority to make it optional and to allow
4909    userinfo in non-HTTP cases.
4910 
4911    Allowing split on 0x0 for Cookie.
4912 
4913    Reserved PRI method in HTTP/1.1 to avoid possible future collisions.
4914 
4915 B.8.  Since draft-ietf-httpbis-http2-08
4916 
4917    Added cookie crumbling for more efficient header compression.
4918 
4919    Added header field ordering with the value-concatenation mechanism.
4920 
4921 
4922 
4923 
4924 
4925 
4926 
4927 
4928 Belshe, et al.           Expires August 15, 2015               [Page 88]
4929 
4930 Internet-Draft                   HTTP/2                    February 2015
4931 
4932 
4933 B.9.  Since draft-ietf-httpbis-http2-07
4934 
4935    Marked draft for implementation.
4936 
4937 B.10.  Since draft-ietf-httpbis-http2-06
4938 
4939    Adding definition for CONNECT method.
4940 
4941    Constraining the use of push to safe, cacheable methods with no
4942    request body.
4943 
4944    Changing from :host to :authority to remove any potential confusion.
4945 
4946    Adding setting for header compression table size.
4947 
4948    Adding settings acknowledgement.
4949 
4950    Removing unnecessary and potentially problematic flags from
4951    CONTINUATION.
4952 
4953    Added denial of service considerations.
4954 
4955 B.11.  Since draft-ietf-httpbis-http2-05
4956 
4957    Marking the draft ready for implementation.
4958 
4959    Renumbering END_PUSH_PROMISE flag.
4960 
4961    Editorial clarifications and changes.
4962 
4963 B.12.  Since draft-ietf-httpbis-http2-04
4964 
4965    Added CONTINUATION frame for HEADERS and PUSH_PROMISE.
4966 
4967    PUSH_PROMISE is no longer implicitly prohibited if
4968    SETTINGS_MAX_CONCURRENT_STREAMS is zero.
4969 
4970    Push expanded to allow all safe methods without a request body.
4971 
4972    Clarified the use of HTTP header fields in requests and responses.
4973    Prohibited HTTP/1.1 hop-by-hop header fields.
4974 
4975    Requiring that intermediaries not forward requests with missing or
4976    illegal routing :-headers.
4977 
4978    Clarified requirements around handling different frames after stream
4979    close, stream reset and GOAWAY.
4980 
4981 
4982 
4983 
4984 Belshe, et al.           Expires August 15, 2015               [Page 89]
4985 
4986 Internet-Draft                   HTTP/2                    February 2015
4987 
4988 
4989    Added more specific prohibitions for sending of different frame types
4990    in various stream states.
4991 
4992    Making the last received setting value the effective value.
4993 
4994    Clarified requirements on TLS version, extension and ciphers.
4995 
4996 B.13.  Since draft-ietf-httpbis-http2-03
4997 
4998    Committed major restructuring atrocities.
4999 
5000    Added reference to first header compression draft.
5001 
5002    Added more formal description of frame lifecycle.
5003 
5004    Moved END_STREAM (renamed from FINAL) back to HEADERS/DATA.
5005 
5006    Removed HEADERS+PRIORITY, added optional priority to HEADERS frame.
5007 
5008    Added PRIORITY frame.
5009 
5010 B.14.  Since draft-ietf-httpbis-http2-02
5011 
5012    Added continuations to frames carrying header blocks.
5013 
5014    Replaced use of "session" with "connection" to avoid confusion with
5015    other HTTP stateful concepts, like cookies.
5016 
5017    Removed "message".
5018 
5019    Switched to TLS ALPN from NPN.
5020 
5021    Editorial changes.
5022 
5023 B.15.  Since draft-ietf-httpbis-http2-01
5024 
5025    Added IANA considerations section for frame types, error codes and
5026    settings.
5027 
5028    Removed data frame compression.
5029 
5030    Added PUSH_PROMISE.
5031 
5032    Added globally applicable flags to framing.
5033 
5034    Removed zlib-based header compression mechanism.
5035 
5036    Updated references.
5037 
5038 
5039 
5040 Belshe, et al.           Expires August 15, 2015               [Page 90]
5041 
5042 Internet-Draft                   HTTP/2                    February 2015
5043 
5044 
5045    Clarified stream identifier reuse.
5046 
5047    Removed CREDENTIALS frame and associated mechanisms.
5048 
5049    Added advice against naive implementation of flow control.
5050 
5051    Added session header section.
5052 
5053    Restructured frame header.  Removed distinction between data and
5054    control frames.
5055 
5056    Altered flow control properties to include session-level limits.
5057 
5058    Added note on cacheability of pushed resources and multiple tenant
5059    servers.
5060 
5061    Changed protocol label form based on discussions.
5062 
5063 B.16.  Since draft-ietf-httpbis-http2-00
5064 
5065    Changed title throughout.
5066 
5067    Removed section on Incompatibilities with SPDY draft#2.
5068 
5069    Changed INTERNAL_ERROR on GOAWAY to have a value of 2 [6].
5070 
5071    Replaced abstract and introduction.
5072 
5073    Added section on starting HTTP/2.0, including upgrade mechanism.
5074 
5075    Removed unused references.
5076 
5077    Added flow control principles (Section 5.2.1) based on [7].
5078 
5079 B.17.  Since draft-mbelshe-httpbis-spdy-00
5080 
5081    Adopted as base for draft-ietf-httpbis-http2.
5082 
5083    Updated authors/editors list.
5084 
5085    Added status note.
5086 
5087 Authors' Addresses
5088 
5089    Mike Belshe
5090    Twist
5091 
5092    EMail: mbelshe@chromium.org
5093 
5094 
5095 
5096 Belshe, et al.           Expires August 15, 2015               [Page 91]
5097 
5098 Internet-Draft                   HTTP/2                    February 2015
5099 
5100 
5101    Roberto Peon
5102    Google, Inc
5103 
5104    EMail: fenix@google.com
5105 
5106 
5107    Martin Thomson (editor)
5108    Mozilla
5109    331 E Evelyn Street
5110    Mountain View, CA  94041
5111    US
5112 
5113    EMail: martin.thomson@gmail.com
5114 
5115 
5116 
5117 
5118 
5119 
5120 
5121 
5122 
5123 
5124 
5125 
5126 
5127 
5128 
5129 
5130 
5131 
5132 
5133 
5134 
5135 
5136 
5137 
5138 
5139 
5140 
5141 
5142 
5143 
5144 
5145 
5146 
5147 
5148 
5149 
5150 
5151 
5152 Belshe, et al.           Expires August 15, 2015               [Page 92]
